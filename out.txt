Cluster 0


Cluster 1
(array([2.7354107, 3.0309365], dtype=float32), 628, [])
(array([2.7677047, 3.0548258], dtype=float32), 585, [])
(array([2.728834 , 3.0689383], dtype=float32), 560, [])
(array([2.7232034, 3.0138316], dtype=float32), 565, [])
(array([2.7402096, 3.0705054], dtype=float32), 587, [])
(array([2.765678 , 3.0164998], dtype=float32), 594, [])
(array([2.7599342, 3.105364 ], dtype=float32), 666, [])
(array([2.6833017, 2.981122 ], dtype=float32), 593, [])
(array([2.628625 , 2.9829297], dtype=float32), 690, [])
(array([2.6110682, 3.105288 ], dtype=float32), 562, [])
(array([3.2180328, 3.16376  ], dtype=float32), 607, [])
(array([3.172945 , 3.1362722], dtype=float32), 642, [])
(array([3.183342, 3.136071], dtype=float32), 561, [])
(array([3.238, 3.108], dtype=float32), 1204, [])
(array([3.1341617, 3.1964388], dtype=float32), 699, [])
(array([3.1791236, 3.2193446], dtype=float32), 679, [])
(array([3.2800996, 3.16142  ], dtype=float32), 689, [])
(array([3.3456318, 3.2222633], dtype=float32), 698, [])
(array([3.3899732, 3.2153587], dtype=float32), 611, [])
(array([3.3898115, 3.2126613], dtype=float32), 592, [])
(array([3.4490325, 3.2856066], dtype=float32), 618, [])
(array([3.4098394, 3.2236152], dtype=float32), 602, [])
(array([3.3248007, 3.2768068], dtype=float32), 621, [])
(array([3.274002 , 3.2581403], dtype=float32), 615, [])
(array([3.085, 3.278], dtype=float32), 1563, [])
(array([2.8613389, 3.406991 ], dtype=float32), 580, [])
(array([2.9364552, 3.3928149], dtype=float32), 635, [])
(array([2.9784143, 3.4017487], dtype=float32), 641, [])
(array([3.002176 , 3.3928077], dtype=float32), 651, [])
(array([2.9122362, 3.3801684], dtype=float32), 668, [])
(array([2.8998559, 3.4119148], dtype=float32), 646, [])
(array([3.08055  , 3.3825977], dtype=float32), 600, [])
(array([3.030653 , 3.2991648], dtype=float32), 671, [])
(array([3.0517547, 3.3776586], dtype=float32), 605, [])
(array([2.9481199, 3.229491 ], dtype=float32), 683, [])
(array([3.0141428, 3.2751808], dtype=float32), 626, [])
(array([2.8001409, 3.377427 ], dtype=float32), 638, [])
(array([2.6503856, 3.4141862], dtype=float32), 575, [])
(array([2.6586113, 3.4435198], dtype=float32), 632, [])
(array([2.63169 , 3.422602], dtype=float32), 569, [])
(array([2.7240927, 3.4127698], dtype=float32), 674, [])
(array([2.6707485, 3.363757 ], dtype=float32), 610, [])
(array([2.9634304, 3.2788985], dtype=float32), 648, [])
(array([3.2135713, 3.3123455], dtype=float32), 581, [])
(array([3.3119323, 3.3913655], dtype=float32), 566, [])
(array([3.2293866, 3.4077353], dtype=float32), 664, [])
(array([3.3832252, 3.3739529], dtype=float32), 687, [])
(array([3.1613734, 3.3999972], dtype=float32), 686, [])
(array([3.3408113, 3.4024644], dtype=float32), 604, [])
(array([3.2629218, 3.4517567], dtype=float32), 675, [])
(array([2.6502287, 3.4869604], dtype=float32), 616, [])
(array([3.1465607, 3.464053 ], dtype=float32), 609, [])
(array([3.1443384, 3.4590254], dtype=float32), 564, [])
(array([2.8275347, 3.4719615], dtype=float32), 680, [])
(array([3.4679804, 3.3281717], dtype=float32), 586, [])
(array([2.6149685, 3.2860153], dtype=float32), 697, [])
(array([2.522881, 3.224435], dtype=float32), 633, [])
(array([2.5118918, 3.1345396], dtype=float32), 574, [])
(array([2.5007977, 3.2480748], dtype=float32), 685, [])
(array([3.238541, 3.020906], dtype=float32), 563, [])
(array([3.0832505, 2.6911824], dtype=float32), 634, [])
(array([3.1497753, 2.7066247], dtype=float32), 578, [])
(array([3.0764492, 2.639003 ], dtype=float32), 681, [])
(array([3.114222 , 2.7088077], dtype=float32), 636, [])
(array([3.0448844, 2.6356797], dtype=float32), 688, [])
(array([3.180735 , 2.6234322], dtype=float32), 643, [])
(array([3.215, 2.679], dtype=float32), 1605, [])
(array([3.2576191, 2.7851   ], dtype=float32), 590, [])
(array([3.3496819, 2.7729175], dtype=float32), 627, [])
(array([3.310471 , 2.7273285], dtype=float32), 645, [])
(array([3.3438492, 2.808303 ], dtype=float32), 577, [])
(array([3.1158617, 2.735441 ], dtype=float32), 691, [])
(array([2.7674055, 2.7862716], dtype=float32), 637, [])
(array([2.7928665, 2.830975 ], dtype=float32), 572, [])
(array([2.8139396, 2.8296628], dtype=float32), 568, [])
(array([2.8355947, 2.8937893], dtype=float32), 579, [])
(array([2.8311632, 2.81372  ], dtype=float32), 639, [])
(array([2.6991549, 2.739298 ], dtype=float32), 614, [])
(array([2.623738, 2.693541], dtype=float32), 654, [])
(array([2.6964743, 2.728474 ], dtype=float32), 630, [])
(array([2.5920558, 2.7632444], dtype=float32), 663, [])
(array([2.67 , 2.758], dtype=float32), 1135, [])
(array([2.576, 2.727], dtype=float32), 1274, [])
(array([2.9173343, 2.8998244], dtype=float32), 650, [])
(array([3.0162618, 2.8745453], dtype=float32), 673, [])
(array([2.9673893, 2.8325984], dtype=float32), 640, [])
(array([3.0632472, 2.868364 ], dtype=float32), 571, [])
(array([3.1509771, 2.8456874], dtype=float32), 625, [])
(array([2.7374926, 2.85546  ], dtype=float32), 662, [])
(array([2.896699 , 2.8929703], dtype=float32), 583, [])
(array([2.5550094, 2.6724398], dtype=float32), 620, [])
(array([2.9397416, 2.896751 ], dtype=float32), 652, [])
(array([2.768608 , 2.7155116], dtype=float32), 670, [])
(array([2.9058716, 2.7785592], dtype=float32), 598, [])
(array([2.8590515, 2.7341104], dtype=float32), 573, [])
(array([3.158713 , 2.9433215], dtype=float32), 656, [])
(array([3.080846 , 2.8388333], dtype=float32), 631, [])
(array([3.335882, 2.819424], dtype=float32), 653, [])
(array([3.2561781, 2.8948119], dtype=float32), 582, [])
(array([2.5614588, 2.7355719], dtype=float32), 617, [])
(array([2.7261918, 2.8704624], dtype=float32), 693, [])
(array([3.0388198, 2.8281574], dtype=float32), 659, [])
(array([3.1724577, 2.918538 ], dtype=float32), 661, [])
(array([2.5685863, 2.566212 ], dtype=float32), 667, [])
(array([3.0602474, 2.9483545], dtype=float32), 658, [])
(array([2.968064 , 2.6196053], dtype=float32), 678, [])
(array([2.736, 2.616], dtype=float32), 1235, [])
(array([2.6809814, 2.5883744], dtype=float32), 624, [])
(array([3.408098 , 2.9154751], dtype=float32), 629, [])
(array([3.4505072, 2.991981 ], dtype=float32), 570, [])
(array([3.4092886, 2.9567971], dtype=float32), 657, [])
(array([3.3510015, 2.9858766], dtype=float32), 692, [])
(array([3.4282556, 3.0687335], dtype=float32), 576, [])
(array([3.4321418, 3.0653028], dtype=float32), 613, [])
(array([2.6402624, 2.521677 ], dtype=float32), 589, [])
(array([3.4298232, 2.748507 ], dtype=float32), 669, [])
(array([3.4111896, 2.91545  ], dtype=float32), 601, [])
(array([3.0154266, 2.6371696], dtype=float32), 599, [])
(array([3.2118952, 2.8117697], dtype=float32), 647, [])
(array([2.7354324, 2.5370398], dtype=float32), 676, [])
(array([2.5121589, 3.210981 ], dtype=float32), 649, [])
(array([2.5371416, 3.2577703], dtype=float32), 672, [])
(array([3.176734 , 2.9964783], dtype=float32), 619, [])
(array([3.474456, 3.119765], dtype=float32), 622, [])
(array([2.5580137, 2.5507596], dtype=float32), 660, [])
(array([2.9208596, 2.7578201], dtype=float32), 677, [])
(array([2.8602402, 2.5460413], dtype=float32), 596, [])
(array([3.4687731, 3.3400855], dtype=float32), 584, [])
(array([3.3002558, 3.4750159], dtype=float32), 623, [])
(array([2.612, 3.135], dtype=float32), 1601, [])
(array([2.8777802, 2.630398 ], dtype=float32), 588, [])
(array([3.1239936, 2.5571914], dtype=float32), 694, [])
(array([3.3075826, 2.6446793], dtype=float32), 644, [])
(array([2.79 , 3.491], dtype=float32), 1320, [])
(array([3.3595371, 2.601368 ], dtype=float32), 682, [])
(array([3.4599516, 2.6855261], dtype=float32), 665, [])
(array([3.484003 , 3.3869123], dtype=float32), 595, [])
(array([2.9550734, 3.1407907], dtype=float32), 696, [])
(array([2.5307674, 2.5720797], dtype=float32), 606, [])
(array([2.9822698, 2.5021079], dtype=float32), 612, [])
(array([2.8280747, 2.5408876], dtype=float32), 608, [])
(array([2.8835962, 3.2240658], dtype=float32), 655, [])
(array([2.7004516, 3.250539 ], dtype=float32), 567, [])
(array([2.9566677, 3.0430858], dtype=float32), 591, [])
(array([3.207296 , 2.5386758], dtype=float32), 597, [])
(array([2.5335214, 3.4932468], dtype=float32), 684, [])
(array([3.596, 2.992], dtype=float32), 1455, [])
(array([3.4958959, 2.5670056], dtype=float32), 695, [])
(array([3.554, 2.737], dtype=float32), 1599, [])
(array([3.415567 , 2.5299234], dtype=float32), 603, [])
(array([2.417, 3.015], dtype=float32), 1307, [])
(array([2.363, 2.823], dtype=float32), 1618, [])
(array([3.711, 3.254], dtype=float32), 1383, [])
(array([2.354, 2.92 ], dtype=float32), 1470, [])
(array([3.754, 2.699], dtype=float32), 1174, [])
(array([3.767, 3.185], dtype=float32), 1502, [])
(array([3.799, 2.703], dtype=float32), 1371, [])
(array([2.151, 2.971], dtype=float32), 1409, [])
(array([2.288, 2.29 ], dtype=float32), 1435, [])
(array([1.979, 3.108], dtype=float32), 1500, [])
(array([1.777, 3.242], dtype=float32), 1125, [])
(array([1.632, 3.301], dtype=float32), 1163, [])
(array([2.19 , 1.881], dtype=float32), 1130, [])
(array([1.868, 1.64 ], dtype=float32), 1588, [])
(array([1.822, 1.587], dtype=float32), 1490, [])
(array([1.784, 1.846], dtype=float32), 1314, [])
(array([1.956, 1.474], dtype=float32), 1552, [])
(array([2.143, 3.54 ], dtype=float32), 1265, [])
(array([1.631, 1.834], dtype=float32), 1192, [])
(array([2.797, 3.92 ], dtype=float32), 1543, [])
(array([1.535, 3.298], dtype=float32), 1402, [])
(array([1.52 , 2.795], dtype=float32), 1413, [])
(array([1.852, 3.708], dtype=float32), 1160, [])
(array([0.16456278, 2.5454342 ], dtype=float32), 702, [])
(array([0.15468498, 2.541781  ], dtype=float32), 810, [])
(array([0.16620012, 2.5675886 ], dtype=float32), 839, [])
(array([0.18915646, 2.52394   ], dtype=float32), 711, [])
(array([0.1755734, 2.5182495], dtype=float32), 720, [])
(array([0.19770977, 2.5771425 ], dtype=float32), 700, [])
(array([0.11920604, 2.5093296 ], dtype=float32), 781, [])
(array([0.13820767, 2.640675  ], dtype=float32), 741, [])
(array([0.20302649, 2.6885946 ], dtype=float32), 729, [])
(array([0.22452827, 2.7013898 ], dtype=float32), 761, [])
(array([0.20225884, 2.7338107 ], dtype=float32), 825, [])
(array([0.16063546, 2.725133  ], dtype=float32), 807, [])
(array([0.15388432, 2.7285857 ], dtype=float32), 826, [])
(array([0.07918425, 2.5653124 ], dtype=float32), 774, [])
(array([0.29597598, 2.682991  ], dtype=float32), 732, [])
(array([0.2278671, 2.8086145], dtype=float32), 824, [])
(array([0.38375652, 2.9604475 ], dtype=float32), 736, [])
(array([0.41927928, 2.9255059 ], dtype=float32), 796, [])
(array([0.4012034, 2.968635 ], dtype=float32), 740, [])
(array([0.3975633, 2.9016192], dtype=float32), 717, [])
(array([0.38260528, 2.9704888 ], dtype=float32), 755, [])
(array([0.33100662, 2.9709084 ], dtype=float32), 753, [])
(array([0.2965506, 2.9209614], dtype=float32), 708, [])
(array([0.22340776, 2.890181  ], dtype=float32), 836, [])
(array([0.22621273, 2.8799608 ], dtype=float32), 800, [])
(array([0.2424592, 2.968387 ], dtype=float32), 735, [])
(array([0.40263912, 3.0493822 ], dtype=float32), 752, [])
(array([0.32631406, 3.0437322 ], dtype=float32), 806, [])
(array([0.33985505, 3.1182723 ], dtype=float32), 812, [])
(array([0.22666548, 2.9372952 ], dtype=float32), 787, [])
(array([0.47167692, 2.9651039 ], dtype=float32), 795, [])
(array([0.39230317, 3.1469357 ], dtype=float32), 777, [])
(array([0.42587623, 2.8452675 ], dtype=float32), 734, [])
(array([0.3632658, 3.2033916], dtype=float32), 809, [])
(array([0.32332647, 3.1844351 ], dtype=float32), 718, [])
(array([0.40690106, 3.111154  ], dtype=float32), 704, [])
(array([0.3857797, 3.3064492], dtype=float32), 737, [])
(array([0.34357128, 3.3702123 ], dtype=float32), 764, [])
(array([0.256374 , 3.4205532], dtype=float32), 832, [])
(array([0.24396506, 3.3337586 ], dtype=float32), 822, [])
(array([0.21126777, 2.8415022 ], dtype=float32), 813, [])
(array([0.3474382, 3.2460136], dtype=float32), 820, [])
(array([0.3566104, 3.4129596], dtype=float32), 837, [])
(array([0.27227354, 2.693085  ], dtype=float32), 771, [])
(array([0.33776528, 2.603997  ], dtype=float32), 804, [])
(array([0.25513366, 3.331292  ], dtype=float32), 765, [])
(array([0.14553858, 3.3082206 ], dtype=float32), 772, [])
(array([0.26864916, 3.2706792 ], dtype=float32), 778, [])
(array([0.19725114, 3.1804886 ], dtype=float32), 745, [])
(array([0.24506262, 3.0850115 ], dtype=float32), 750, [])
(array([0.3368038, 2.7977984], dtype=float32), 827, [])
(array([0.3506964, 2.8008466], dtype=float32), 831, [])
(array([0.22515033, 3.0690026 ], dtype=float32), 793, [])
(array([0.4025621, 2.7758448], dtype=float32), 712, [])
(array([0.08740323, 2.8655572 ], dtype=float32), 803, [])
(array([-0.31208706,  2.923358  ], dtype=float32), 721, [])
(array([-0.34 ,  2.959], dtype=float32), 1481, [])
(array([-0.3633411,  2.9029438], dtype=float32), 768, [])
(array([-0.4098094,  2.9078925], dtype=float32), 819, [])
(array([-0.36354533,  2.9430778 ], dtype=float32), 757, [])
(array([-0.30586097,  2.968934  ], dtype=float32), 783, [])
(array([-0.29141805,  2.957041  ], dtype=float32), 801, [])
(array([-0.4343618,  2.8705213], dtype=float32), 797, [])
(array([-0.2997178,  3.006045 ], dtype=float32), 739, [])
(array([-0.40311748,  2.8562753 ], dtype=float32), 788, [])
(array([-0.45040926,  2.9356139 ], dtype=float32), 828, [])
(array([-0.44438985,  2.990628  ], dtype=float32), 770, [])
(array([-0.48858273,  3.072546  ], dtype=float32), 782, [])
(array([-0.48899093,  3.097315  ], dtype=float32), 725, [])
(array([-0.26725194,  2.8972564 ], dtype=float32), 811, [])
(array([-0.13863897,  2.7398515 ], dtype=float32), 710, [])
(array([-0.15441722,  2.80189   ], dtype=float32), 792, [])
(array([-0.11215489,  2.7126725 ], dtype=float32), 724, [])
(array([-0.17061272,  2.752555  ], dtype=float32), 834, [])
(array([-0.216784 ,  2.8403978], dtype=float32), 744, [])
(array([-0.15008616,  2.6781425 ], dtype=float32), 748, [])
(array([-0.22044738,  2.8088348 ], dtype=float32), 784, [])
(array([-0.13630453,  2.7245042 ], dtype=float32), 794, [])
(array([-0.09179877,  2.7986844 ], dtype=float32), 823, [])
(array([-0.02421826,  2.802861  ], dtype=float32), 814, [])
(array([-2.4755888e-03,  2.7930968e+00], dtype=float32), 789, [])
(array([-0.05153381,  2.72999   ], dtype=float32), 818, [])
(array([-0.057,  2.813], dtype=float32), 1561, [])
(array([0.0224665, 2.765633 ], dtype=float32), 829, [])
(array([-0.18050563,  2.8471603 ], dtype=float32), 738, [])
(array([-0.42848897,  3.0294154 ], dtype=float32), 780, [])
(array([-0.009,  2.868], dtype=float32), 1179, [])
(array([-0.0308408,  2.7064762], dtype=float32), 762, [])
(array([-0.49636364,  3.0232446 ], dtype=float32), 758, [])
(array([-0.1711595,  2.869102 ], dtype=float32), 730, [])
(array([-0.21260917,  2.7052143 ], dtype=float32), 746, [])
(array([-0.42848647,  3.151212  ], dtype=float32), 799, [])
(array([-0.3430831,  3.2397268], dtype=float32), 707, [])
(array([-0.15420453,  3.1352966 ], dtype=float32), 773, [])
(array([-0.09442361,  3.1446335 ], dtype=float32), 786, [])
(array([-0.15124285,  3.1009037 ], dtype=float32), 815, [])
(array([-0.15787286,  3.1671324 ], dtype=float32), 751, [])
(array([-0.08450866,  3.1257052 ], dtype=float32), 821, [])
(array([-0.02005365,  3.1863387 ], dtype=float32), 830, [])
(array([-0.06966815,  3.1784513 ], dtype=float32), 742, [])
(array([-0.02127944,  3.271257  ], dtype=float32), 802, [])
(array([-0.23204058,  3.1116612 ], dtype=float32), 769, [])
(array([-0.27977765,  3.2083507 ], dtype=float32), 715, [])
(array([-0.32068112,  3.3105042 ], dtype=float32), 798, [])
(array([0.01714931, 3.352427  ], dtype=float32), 728, [])
(array([0.05159871, 3.4058485 ], dtype=float32), 760, [])
(array([-0.05198086,  3.4086535 ], dtype=float32), 835, [])
(array([-0.20588364,  3.1177907 ], dtype=float32), 775, [])
(array([-0.01099833,  3.0563667 ], dtype=float32), 754, [])
(array([-0.18410969,  3.26686   ], dtype=float32), 703, [])
(array([-0.29097244,  3.3299606 ], dtype=float32), 759, [])
(array([-0.4174137,  3.3414598], dtype=float32), 791, [])
(array([2.6010287e-03, 3.2289653e+00], dtype=float32), 706, [])
(array([-0.43332177,  3.1481369 ], dtype=float32), 731, [])
(array([0.13313214, 3.2347705 ], dtype=float32), 833, [])
(array([-0.23069121,  3.308866  ], dtype=float32), 722, [])
(array([-0.02835518,  3.029949  ], dtype=float32), 719, [])
(array([-0.46574262,  2.8172896 ], dtype=float32), 766, [])
(array([-0.46739873,  3.2778556 ], dtype=float32), 727, [])
(array([0.45071578, 3.3168597 ], dtype=float32), 723, [])
(array([0.1385647, 3.1686747], dtype=float32), 805, [])
(array([0.12043459, 3.4423175 ], dtype=float32), 714, [])
(array([0.15536265, 3.1944945 ], dtype=float32), 779, [])
(array([-0.09412111,  3.3299134 ], dtype=float32), 747, [])
(array([-0.11402613,  2.5944293 ], dtype=float32), 709, [])
(array([-0.12105651,  2.5149822 ], dtype=float32), 713, [])
(array([0.10766564, 3.3744955 ], dtype=float32), 838, [])
(array([-0.00560476,  3.4928098 ], dtype=float32), 733, [])
(array([-0.02617963,  3.0177975 ], dtype=float32), 705, [])
(array([0.38933033, 2.6617355 ], dtype=float32), 743, [])
(array([-0.02536247,  2.9603531 ], dtype=float32), 816, [])
(array([0.343, 3.5  ], dtype=float32), 1315, [])
(array([0.46724504, 3.2808907 ], dtype=float32), 767, [])
(array([-0.49895617,  3.436086  ], dtype=float32), 790, [])
(array([-0.487,  3.439], dtype=float32), 1505, [])
(array([0.36276335, 3.4683769 ], dtype=float32), 785, [])
(array([-0.017,  3.516], dtype=float32), 1221, [])
(array([0.19228183, 3.4970837 ], dtype=float32), 756, [])
(array([0.554, 2.849], dtype=float32), 1497, [])
(array([-0.4920623,  3.340968 ], dtype=float32), 808, [])
(array([-0.36472276,  3.4804637 ], dtype=float32), 726, [])
(array([0.36598796, 2.5179257 ], dtype=float32), 749, [])
(array([-0.23817235,  2.5195537 ], dtype=float32), 817, [])
(array([-0.26008525,  2.5300953 ], dtype=float32), 763, [])
(array([-0.25013307,  2.5115902 ], dtype=float32), 701, [])
(array([0.4003022, 2.5171733], dtype=float32), 716, [])
(array([-0.016,  2.421], dtype=float32), 1366, [])
(array([0.40288857, 2.5005987 ], dtype=float32), 776, [])
(array([0.282, 2.297], dtype=float32), 1604, [])
(array([-0.51 ,  3.727], dtype=float32), 1619, [])
(array([-0.281,  3.643], dtype=float32), 1181, [])
(array([0.236, 1.982], dtype=float32), 1558, [])
(array([-0.693,  3.581], dtype=float32), 1328, [])
(array([0.443, 2.156], dtype=float32), 1138, [])
(array([-0.747,  2.655], dtype=float32), 1359, [])
(array([0.507, 3.854], dtype=float32), 1425, [])
(array([-0.837,  2.777], dtype=float32), 1292, [])
(array([0.809, 1.921], dtype=float32), 1549, [])
(array([1.   , 1.256], dtype=float32), 1332, [])
(array([1.029, 1.575], dtype=float32), 1423, [])
(array([0.8  , 1.749], dtype=float32), 1329, [])
(array([0.657, 1.544], dtype=float32), 1272, [])
(array([1.087, 1.442], dtype=float32), 1443, [])
(array([-0.867,  3.965], dtype=float32), 1593, [])
(array([1.154, 1.536], dtype=float32), 1290, [])
(array([0.484, 1.561], dtype=float32), 1557, [])
(array([0.214, 3.892], dtype=float32), 1196, [])
(array([0.234, 1.739], dtype=float32), 1508, [])
(array([0.662, 1.221], dtype=float32), 1304, [])
(array([0.837, 3.389], dtype=float32), 1176, [])
(array([1.27, 3.74], dtype=float32), 1263, [])
(array([1.052, 3.91 ], dtype=float32), 1206, [])
(array([1.304, 3.89 ], dtype=float32), 1136, [])
(array([1.374, 4.007], dtype=float32), 1401, [])
(array([1.434, 3.976], dtype=float32), 1228, [])
(array([1.056, 3.715], dtype=float32), 1541, [])
(array([1.359, 4.333], dtype=float32), 1403, [])
(array([1.358, 4.243], dtype=float32), 1266, [])
(array([0.09 , 1.855], dtype=float32), 1393, [])
(array([-1.273,  4.235], dtype=float32), 1219, [])
(array([-0.935,  4.38 ], dtype=float32), 1316, [])
(array([0.17101185, 5.8209577 ], dtype=float32), 963, [])
(array([0.23531264, 5.8399143 ], dtype=float32), 956, [])
(array([0.29288068, 5.853903  ], dtype=float32), 952, [])
(array([0.14647388, 5.8235097 ], dtype=float32), 892, [])
(array([0.24628405, 5.7982783 ], dtype=float32), 910, [])
(array([0.16998084, 5.768193  ], dtype=float32), 841, [])
(array([0.14886568, 5.845883  ], dtype=float32), 887, [])
(array([0.14419775, 5.845233  ], dtype=float32), 908, [])
(array([0.139, 5.896], dtype=float32), 1579, [])
(array([0.22733095, 5.7997847 ], dtype=float32), 878, [])
(array([0.27656248, 5.868794  ], dtype=float32), 977, [])
(array([0.31588593, 5.7852416 ], dtype=float32), 857, [])
(array([0.11494104, 5.977956  ], dtype=float32), 849, [])
(array([0.10443341, 5.986549  ], dtype=float32), 860, [])
(array([0.33279634, 5.8439493 ], dtype=float32), 872, [])
(array([0.01868371, 6.008258  ], dtype=float32), 920, [])
(array([-0.14575998,  6.057177  ], dtype=float32), 845, [])
(array([-0.06690231,  6.059116  ], dtype=float32), 901, [])
(array([-0.14588706,  6.0274596 ], dtype=float32), 929, [])
(array([-0.12845536,  6.115336  ], dtype=float32), 975, [])
(array([-0.20357256,  6.1198044 ], dtype=float32), 947, [])
(array([-0.24606486,  6.033487  ], dtype=float32), 951, [])
(array([-0.27561557,  6.0755243 ], dtype=float32), 862, [])
(array([-0.08370299,  6.0825195 ], dtype=float32), 840, [])
(array([0.18710797, 5.928229  ], dtype=float32), 917, [])
(array([4.9599651e-03, 6.0217023e+00], dtype=float32), 891, [])
(array([-0.23476672,  6.11408   ], dtype=float32), 913, [])
(array([0.21146569, 5.6822286 ], dtype=float32), 973, [])
(array([0.22695649, 5.576356  ], dtype=float32), 976, [])
(array([0.21076135, 5.630257  ], dtype=float32), 863, [])
(array([0.14277667, 5.6008177 ], dtype=float32), 842, [])
(array([-0.33481807,  6.1570854 ], dtype=float32), 954, [])
(array([0.00940863, 6.0551233 ], dtype=float32), 945, [])
(array([0.02419594, 5.945098  ], dtype=float32), 968, [])
(array([-0.4274509,  6.1599684], dtype=float32), 866, [])
(array([-0.4622012,  6.2475257], dtype=float32), 861, [])
(array([-0.4420289,  6.2847285], dtype=float32), 879, [])
(array([-0.47009343,  6.291775  ], dtype=float32), 937, [])
(array([0.12805901, 5.7155447 ], dtype=float32), 854, [])
(array([0.119, 6.023], dtype=float32), 1427, [])
(array([-0.3304897,  6.258894 ], dtype=float32), 864, [])
(array([-0.2755818,  6.346973 ], dtype=float32), 919, [])
(array([0.35063124, 5.9548683 ], dtype=float32), 911, [])
(array([-0.31955963,  6.006199  ], dtype=float32), 859, [])
(array([-0.37307745,  5.8870606 ], dtype=float32), 950, [])
(array([-0.37491167,  5.8678784 ], dtype=float32), 874, [])
(array([-0.36711204,  5.9433594 ], dtype=float32), 979, [])
(array([-0.43963033,  5.9053054 ], dtype=float32), 958, [])
(array([-0.34922564,  5.8924346 ], dtype=float32), 962, [])
(array([-0.44509324,  5.8697386 ], dtype=float32), 933, [])
(array([-0.3255376,  5.816623 ], dtype=float32), 940, [])
(array([-0.17774515,  5.761386  ], dtype=float32), 938, [])
(array([-0.2360822,  5.695735 ], dtype=float32), 930, [])
(array([-0.2370008,  5.707065 ], dtype=float32), 885, [])
(array([-0.214,  5.693], dtype=float32), 1364, [])
(array([-0.12163527,  5.7079806 ], dtype=float32), 898, [])
(array([-0.03 ,  5.671], dtype=float32), 1197, [])
(array([-0.03346168,  5.589224  ], dtype=float32), 921, [])
(array([-0.07320818,  5.5506415 ], dtype=float32), 907, [])
(array([-0.03550294,  5.616834  ], dtype=float32), 926, [])
(array([-0.25199336,  5.6171126 ], dtype=float32), 916, [])
(array([-0.13026482,  5.761304  ], dtype=float32), 900, [])
(array([-0.31074914,  5.7058396 ], dtype=float32), 925, [])
(array([-0.13224368,  5.5964637 ], dtype=float32), 870, [])
(array([-0.06440786,  5.765575  ], dtype=float32), 852, [])
(array([-0.47912145,  6.185523  ], dtype=float32), 848, [])
(array([-0.48324183,  6.303506  ], dtype=float32), 856, [])
(array([-0.25803897,  5.9894986 ], dtype=float32), 855, [])
(array([0.07420135, 5.662729  ], dtype=float32), 970, [])
(array([-0.47847825,  5.9841266 ], dtype=float32), 884, [])
(array([-0.15334038,  5.5928864 ], dtype=float32), 978, [])
(array([-0.25486302,  5.8520675 ], dtype=float32), 877, [])
(array([-0.14192213,  5.806911  ], dtype=float32), 894, [])
(array([0.37575662, 5.805896  ], dtype=float32), 858, [])
(array([-0.04535889,  6.206001  ], dtype=float32), 928, [])
(array([0.22591792, 6.448708  ], dtype=float32), 943, [])
(array([0.18852818, 6.482742  ], dtype=float32), 955, [])
(array([0.24675007, 6.4380713 ], dtype=float32), 881, [])
(array([0.22007434, 6.418462  ], dtype=float32), 915, [])
(array([0.194, 6.492], dtype=float32), 1347, [])
(array([0.14444362, 6.451528  ], dtype=float32), 944, [])
(array([0.2283207, 6.375898 ], dtype=float32), 904, [])
(array([0.30487454, 6.3374343 ], dtype=float32), 906, [])
(array([0.285606, 6.310067], dtype=float32), 932, [])
(array([0.32123283, 6.2621465 ], dtype=float32), 964, [])
(array([0.10574056, 6.4309807 ], dtype=float32), 883, [])
(array([-0.09671028,  6.3289323 ], dtype=float32), 912, [])
(array([-0.01832351,  6.37114   ], dtype=float32), 844, [])
(array([0.06957322, 6.3883924 ], dtype=float32), 869, [])
(array([0.36124814, 6.1788154 ], dtype=float32), 939, [])
(array([0.2743897, 6.215766 ], dtype=float32), 895, [])
(array([0.05126584, 6.476535  ], dtype=float32), 969, [])
(array([0.3030788, 6.3578067], dtype=float32), 957, [])
(array([0.2584772, 6.2667875], dtype=float32), 927, [])
(array([-0.01838686,  6.456817  ], dtype=float32), 851, [])
(array([-0.097,  6.255], dtype=float32), 1166, [])
(array([0.00717077, 6.350101  ], dtype=float32), 972, [])
(array([-0.13190927,  6.3400435 ], dtype=float32), 876, [])
(array([-0.08709271,  6.372671  ], dtype=float32), 922, [])
(array([0.3293015, 6.4205723], dtype=float32), 924, [])
(array([-0.09208858,  6.244732  ], dtype=float32), 974, [])
(array([0.09303111, 6.357714  ], dtype=float32), 961, [])
(array([0.02376971, 6.476215  ], dtype=float32), 888, [])
(array([0.17886765, 5.555382  ], dtype=float32), 941, [])
(array([0.28946316, 5.500629  ], dtype=float32), 942, [])
(array([-0.34047392,  6.1358624 ], dtype=float32), 934, [])
(array([0.42590198, 6.2847233 ], dtype=float32), 903, [])
(array([0.45489275, 6.381678  ], dtype=float32), 914, [])
(array([0.27653968, 6.145528  ], dtype=float32), 893, [])
(array([0.39518496, 6.1833506 ], dtype=float32), 949, [])
(array([-0.05979918,  5.509173  ], dtype=float32), 953, [])
(array([0.37633568, 5.550469  ], dtype=float32), 948, [])
(array([0.01642349, 5.6580687 ], dtype=float32), 850, [])
(array([-0.20277758,  6.260423  ], dtype=float32), 865, [])
(array([0.292, 6.11 ], dtype=float32), 1576, [])
(array([0.31309757, 5.657086  ], dtype=float32), 846, [])
(array([-0.30910438,  5.5899496 ], dtype=float32), 867, [])
(array([-0.32740843,  6.343333  ], dtype=float32), 905, [])
(array([0.24888495, 5.507143  ], dtype=float32), 902, [])
(array([-0.17678083,  5.9814787 ], dtype=float32), 965, [])
(array([-0.09320349,  6.4982357 ], dtype=float32), 971, [])
(array([-0.3132197,  6.3381395], dtype=float32), 843, [])
(array([0.46406662, 6.432427  ], dtype=float32), 960, [])
(array([0.3762817, 5.965167 ], dtype=float32), 871, [])
(array([-0.174,  5.458], dtype=float32), 1154, [])
(array([-0.4962203,  6.324345 ], dtype=float32), 890, [])
(array([0.0475062, 6.235562 ], dtype=float32), 936, [])
(array([-0.11585004,  6.4929547 ], dtype=float32), 931, [])
(array([0.4149729, 6.116833 ], dtype=float32), 966, [])
(array([0.47018182, 5.9123945 ], dtype=float32), 946, [])
(array([-0.46068498,  6.0532293 ], dtype=float32), 967, [])
(array([-0.48215708,  6.038753  ], dtype=float32), 882, [])
(array([0.02198206, 6.2023716 ], dtype=float32), 918, [])
(array([-0.22206944,  6.459411  ], dtype=float32), 853, [])
(array([-0.33503118,  5.5056086 ], dtype=float32), 923, [])
(array([0.46828157, 5.651594  ], dtype=float32), 886, [])
(array([0.41953522, 6.020645  ], dtype=float32), 880, [])
(array([0.37116843, 5.508623  ], dtype=float32), 868, [])
(array([0.44903025, 5.6467113 ], dtype=float32), 897, [])
(array([-0.29711485,  5.5222526 ], dtype=float32), 959, [])
(array([0.47802705, 6.465682  ], dtype=float32), 875, [])
(array([0.49028012, 6.2988706 ], dtype=float32), 889, [])
(array([0.4774164, 5.624832 ], dtype=float32), 847, [])
(array([-0.43494615,  5.7007446 ], dtype=float32), 873, [])
(array([0.49771872, 5.7994394 ], dtype=float32), 896, [])
(array([-0.3245978,  6.4322767], dtype=float32), 909, [])
(array([0.4406783, 6.4717073], dtype=float32), 935, [])
(array([-0.4644657,  5.5890656], dtype=float32), 899, [])
(array([-0.125,  5.399], dtype=float32), 1340, [])
(array([-0.484,  5.508], dtype=float32), 1349, [])
(array([0.178, 5.39 ], dtype=float32), 1360, [])
(array([0.306, 6.632], dtype=float32), 1141, [])
(array([0.361, 5.311], dtype=float32), 1546, [])
(array([-0.332,  5.27 ], dtype=float32), 1216, [])
(array([-0.267,  5.252], dtype=float32), 1382, [])
(array([-0.571,  5.297], dtype=float32), 1535, [])
(array([-0.601,  6.539], dtype=float32), 1223, [])
(array([-0.676,  5.558], dtype=float32), 1395, [])
(array([-0.54 ,  5.056], dtype=float32), 1529, [])
(array([-0.847,  4.921], dtype=float32), 1327, [])
(array([-1.083,  4.926], dtype=float32), 1564, [])
(array([-0.863,  4.717], dtype=float32), 1479, [])
(array([0.761, 6.585], dtype=float32), 1326, [])
(array([-0.619,  5.125], dtype=float32), 1201, [])
(array([-0.9  ,  5.364], dtype=float32), 1147, [])
(array([-1.229,  5.455], dtype=float32), 1504, [])
(array([-1.167,  5.657], dtype=float32), 1275, [])
(array([-1.269,  5.652], dtype=float32), 1436, [])
(array([0.83 , 6.208], dtype=float32), 1325, [])
(array([-1.019,  4.863], dtype=float32), 1322, [])
(array([-1.412,  4.996], dtype=float32), 1372, [])
(array([-1.045,  4.788], dtype=float32), 1369, [])
(array([-0.501,  6.75 ], dtype=float32), 1397, [])
(array([-1.404,  5.278], dtype=float32), 1459, [])
(array([1.25 , 6.378], dtype=float32), 1484, [])
(array([1.26 , 6.593], dtype=float32), 1241, [])
(array([-0.282,  3.923], dtype=float32), 1301, [])
(array([-0.945,  2.682], dtype=float32), 1293, [])
(array([-1.465,  4.519], dtype=float32), 1283, [])
(array([0.99 , 6.221], dtype=float32), 1583, [])
(array([-1.41 ,  2.483], dtype=float32), 1379, [])
(array([-1.899,  2.338], dtype=float32), 1487, [])
(array([-1.737,  4.954], dtype=float32), 1458, [])
(array([-2.9397008,  4.674148 ], dtype=float32), 1072, [])
(array([-2.878673 ,  4.6962643], dtype=float32), 1068, [])
(array([-2.8088005,  4.6784005], dtype=float32), 1031, [])
(array([-2.896,  4.68 ], dtype=float32), 1308, [])
(array([-2.8627226,  4.686682 ], dtype=float32), 1105, [])
(array([-2.9126053,  4.7561026], dtype=float32), 1103, [])
(array([-2.7874815,  4.6448307], dtype=float32), 1037, [])
(array([-2.9466147,  4.617647 ], dtype=float32), 1062, [])
(array([-2.981051 ,  4.7027397], dtype=float32), 1113, [])
(array([-2.9893084,  4.6851807], dtype=float32), 1035, [])
(array([-2.8014245,  4.7450795], dtype=float32), 1069, [])
(array([-2.767878 ,  4.6347165], dtype=float32), 1052, [])
(array([-2.7384584,  4.5906787], dtype=float32), 1006, [])
(array([-2.9454257,  4.8199987], dtype=float32), 991, [])
(array([-2.793257,  4.554877], dtype=float32), 1111, [])
(array([-2.833366 ,  4.8658137], dtype=float32), 989, [])
(array([-2.8866143,  4.9101152], dtype=float32), 1016, [])
(array([-2.9764621,  4.8158455], dtype=float32), 1110, [])
(array([-2.8151884,  4.8256435], dtype=float32), 1112, [])
(array([-2.9363692,  4.5162954], dtype=float32), 1014, [])
(array([-2.9381382,  4.5405765], dtype=float32), 1093, [])
(array([-2.9076843,  4.945964 ], dtype=float32), 1095, [])
(array([-3.4062133,  5.3093443], dtype=float32), 1099, [])
(array([-3.388403,  5.248964], dtype=float32), 1080, [])
(array([-3.3586617,  5.1867223], dtype=float32), 984, [])
(array([-3.460909 ,  5.2804146], dtype=float32), 1083, [])
(array([-3.372899,  5.306817], dtype=float32), 1104, [])
(array([-3.3463755,  5.218067 ], dtype=float32), 981, [])
(array([-3.3849676,  5.1723685], dtype=float32), 1005, [])
(array([-3.3559237,  5.0865917], dtype=float32), 998, [])
(array([-3.3771257,  5.135566 ], dtype=float32), 1026, [])
(array([-3.287636 ,  5.1105556], dtype=float32), 1049, [])
(array([-3.1273706,  5.1324983], dtype=float32), 985, [])
(array([-3.2191522,  5.118056 ], dtype=float32), 1055, [])
(array([-3.2847185,  5.2045274], dtype=float32), 1081, [])
(array([-3.3054397,  5.29856  ], dtype=float32), 1107, [])
(array([-3.4757278,  5.295198 ], dtype=float32), 1046, [])
(array([-3.4760716,  5.2186065], dtype=float32), 1117, [])
(array([-3.2938037,  5.0754538], dtype=float32), 1002, [])
(array([-3.473456 ,  5.1131454], dtype=float32), 996, [])
(array([-3.2100625,  5.170085 ], dtype=float32), 1073, [])
(array([-3.274,  5.084], dtype=float32), 1375, [])
(array([-3.255399 ,  5.3079057], dtype=float32), 999, [])
(array([-3.0910118,  5.291743 ], dtype=float32), 1119, [])
(array([-3.0651438,  5.3299494], dtype=float32), 1077, [])
(array([-3.1344275,  5.319945 ], dtype=float32), 1066, [])
(array([-3.2048547,  5.4533505], dtype=float32), 1020, [])
(array([-3.1767008,  5.402007 ], dtype=float32), 1013, [])
(array([-3.104495,  5.257098], dtype=float32), 1028, [])
(array([-3.1125395,  5.349997 ], dtype=float32), 1033, [])
(array([-3.2655275,  5.4108095], dtype=float32), 1109, [])
(array([-3.2075777,  5.400299 ], dtype=float32), 993, [])
(array([-3.2784755,  5.4670954], dtype=float32), 1032, [])
(array([-3.4842741,  5.174521 ], dtype=float32), 1058, [])
(array([-3.3715851,  5.3885746], dtype=float32), 1008, [])
(array([-3.2905889,  5.3148293], dtype=float32), 1043, [])
(array([-3.4693086,  5.3298235], dtype=float32), 980, [])
(array([-3.102648 ,  5.2209077], dtype=float32), 1025, [])
(array([-3.374914 ,  5.4255705], dtype=float32), 1059, [])
(array([-3.476987 ,  5.0964103], dtype=float32), 1057, [])
(array([-3.027902 ,  5.1239533], dtype=float32), 1051, [])
(array([-2.7496119,  5.3235183], dtype=float32), 1060, [])
(array([-2.68917 ,  5.370673], dtype=float32), 1038, [])
(array([-2.7772007,  5.384775 ], dtype=float32), 1054, [])
(array([-2.8188775,  5.315013 ], dtype=float32), 1007, [])
(array([-2.855791 ,  5.3911858], dtype=float32), 1044, [])
(array([-2.7158175,  5.445693 ], dtype=float32), 987, [])
(array([-2.7619684,  5.3711357], dtype=float32), 1045, [])
(array([-2.9078133,  5.347998 ], dtype=float32), 1023, [])
(array([-2.8423069,  5.4079204], dtype=float32), 1047, [])
(array([-2.8683996,  5.3862057], dtype=float32), 1108, [])
(array([-2.7235153,  5.4577594], dtype=float32), 1022, [])
(array([-2.8829458,  5.23016  ], dtype=float32), 1056, [])
(array([-2.9438105,  5.0907617], dtype=float32), 1118, [])
(array([-2.8929725,  5.1488705], dtype=float32), 1042, [])
(array([-2.939,  5.143], dtype=float32), 1242, [])
(array([-2.6960218,  5.3131247], dtype=float32), 1096, [])
(array([-2.8154938,  5.279972 ], dtype=float32), 1094, [])
(array([-2.8946753,  5.0583653], dtype=float32), 1089, [])
(array([-2.6329465,  5.3299274], dtype=float32), 983, [])
(array([-2.697831,  5.198673], dtype=float32), 1090, [])
(array([-2.648423,  5.042854], dtype=float32), 1017, [])
(array([-2.5793648,  5.0013037], dtype=float32), 1000, [])
(array([-2.6071444,  5.041224 ], dtype=float32), 988, [])
(array([-2.6525636,  5.1128855], dtype=float32), 1097, [])
(array([-2.6489384,  5.1795983], dtype=float32), 1082, [])
(array([-2.696214,  4.973843], dtype=float32), 1012, [])
(array([-2.6898189,  4.9765983], dtype=float32), 1019, [])
(array([-2.6428611,  5.0937552], dtype=float32), 1088, [])
(array([-2.6363604,  4.9046607], dtype=float32), 1070, [])
(array([-2.5805616,  5.191726 ], dtype=float32), 1034, [])
(array([-2.9372365,  5.291562 ], dtype=float32), 995, [])
(array([-2.5641387,  5.267115 ], dtype=float32), 994, [])
(array([-3.0969791,  5.1074576], dtype=float32), 1075, [])
(array([-3.3070014,  4.9653563], dtype=float32), 1010, [])
(array([-3.4432416,  4.7247205], dtype=float32), 1040, [])
(array([-3.4096093,  4.6495   ], dtype=float32), 1071, [])
(array([-3.411877,  4.788785], dtype=float32), 1085, [])
(array([-3.3612428,  4.6163397], dtype=float32), 1102, [])
(array([-3.4124377,  4.7041593], dtype=float32), 1053, [])
(array([-3.4414663,  4.6228848], dtype=float32), 982, [])
(array([-3.3454967,  4.6049943], dtype=float32), 1003, [])
(array([-3.4676428,  4.7926106], dtype=float32), 1050, [])
(array([-3.3845646,  4.7692056], dtype=float32), 1061, [])
(array([-3.4949896,  4.7963424], dtype=float32), 1098, [])
(array([-3.531,  4.692], dtype=float32), 1448, [])
(array([-3.3496726,  4.88619  ], dtype=float32), 1076, [])
(array([-3.239631,  4.88334 ], dtype=float32), 1067, [])
(array([-2.7320166,  5.486359 ], dtype=float32), 1116, [])
(array([-2.5228713,  5.0650496], dtype=float32), 992, [])
(array([-2.640606 ,  4.7812696], dtype=float32), 1065, [])
(array([-2.5867903,  4.628169 ], dtype=float32), 1063, [])
(array([-2.593146 ,  4.6698422], dtype=float32), 1087, [])
(array([-2.5655358,  4.7327747], dtype=float32), 990, [])
(array([-2.6679544,  4.6872888], dtype=float32), 1115, [])
(array([-2.5592875,  4.6786203], dtype=float32), 1064, [])
(array([-2.5608177,  4.5630746], dtype=float32), 1092, [])
(array([-3.2988596,  4.675942 ], dtype=float32), 1079, [])
(array([-2.7133715,  5.201722 ], dtype=float32), 1078, [])
(array([-2.90992  ,  5.0742555], dtype=float32), 1024, [])
(array([-2.9866471,  5.312643 ], dtype=float32), 1001, [])
(array([-2.943804,  5.434231], dtype=float32), 1106, [])
(array([-3.4217217,  5.045239 ], dtype=float32), 1029, [])
(array([-3.1331525,  5.063292 ], dtype=float32), 1004, [])
(array([-2.682,  4.913], dtype=float32), 1616, [])
(array([-3.3544333,  4.9010906], dtype=float32), 1100, [])
(array([-3.0246327,  4.553979 ], dtype=float32), 1021, [])
(array([-2.5175352,  4.971233 ], dtype=float32), 1015, [])
(array([-2.5597434,  5.30741  ], dtype=float32), 1011, [])
(array([-2.7847455,  5.0293813], dtype=float32), 1039, [])
(array([-2.6687753,  4.823448 ], dtype=float32), 1091, [])
(array([-2.519428 ,  4.9774036], dtype=float32), 1027, [])
(array([-2.861392 ,  4.5259004], dtype=float32), 1041, [])
(array([-3.1545198,  5.494609 ], dtype=float32), 1018, [])
(array([-2.5067573,  5.199134 ], dtype=float32), 1101, [])
(array([-2.6488745,  4.537459 ], dtype=float32), 1048, [])
(array([-3.0691328,  4.741952 ], dtype=float32), 1030, [])
(array([-2.6460252,  4.507334 ], dtype=float32), 1036, [])
(array([-3.0667846,  4.517021 ], dtype=float32), 1084, [])
(array([-3.3965285,  4.5437694], dtype=float32), 986, [])
(array([-3.36344 ,  5.499424], dtype=float32), 1114, [])
(array([-3.1960547,  4.569069 ], dtype=float32), 1074, [])
(array([-3.1400518,  4.7411838], dtype=float32), 1086, [])
(array([-3.1236553,  4.9199915], dtype=float32), 997, [])
(array([-3.1337457,  4.9255347], dtype=float32), 1009, [])
(array([-2.361,  4.986], dtype=float32), 1416, [])
(array([-3.033,  4.208], dtype=float32), 1488, [])
(array([-2.164,  5.233], dtype=float32), 1298, [])
(array([-2.853,  4.144], dtype=float32), 1461, [])
(array([-2.378,  4.2  ], dtype=float32), 1202, [])
(array([-3.383,  5.953], dtype=float32), 1550, [])
(array([-3.219,  6.35 ], dtype=float32), 1287, [])
(array([-3.13 ,  6.388], dtype=float32), 1491, [])
(array([1.024, 1.953], dtype=float32), 1285, [])
(array([-3.929,  4.551], dtype=float32), 1344, [])
(array([1.47, 3.22], dtype=float32), 1595, [])
(array([-2.607,  3.987], dtype=float32), 1124, [])
(array([0.778, 3.915], dtype=float32), 1412, [])
(array([1.672, 1.956], dtype=float32), 1559, [])
(array([2.7  , 2.003], dtype=float32), 1578, [])
(array([1.281, 6.664], dtype=float32), 1514, [])
(array([-1.006,  2.247], dtype=float32), 1189, [])
(array([-0.912,  1.953], dtype=float32), 1250, [])
(array([-0.23190288, -0.08296467], dtype=float32), 455, [])
(array([-0.276, -0.087], dtype=float32), 1362, [])
(array([-0.28636062, -0.05630764], dtype=float32), 436, [])
(array([-0.23149501, -0.04273493], dtype=float32), 514, [])
(array([-0.23489913, -0.11067261], dtype=float32), 542, [])
(array([-0.22180378, -0.04408315], dtype=float32), 501, [])
(array([-0.25021365, -0.11328379], dtype=float32), 511, [])
(array([-0.3423612, -0.0844853], dtype=float32), 532, [])
(array([-0.14100249, -0.14222766], dtype=float32), 531, [])
(array([-0.05129832, -0.15568206], dtype=float32), 481, [])
(array([-0.07421718, -0.24193068], dtype=float32), 541, [])
(array([-0.12306467, -0.13251925], dtype=float32), 520, [])
(array([-0.06185256, -0.08733183], dtype=float32), 438, [])
(array([-0.3202782 ,  0.00361011], dtype=float32), 447, [])
(array([-0.10713066, -0.23774692], dtype=float32), 440, [])
(array([-0.1350501 , -0.13928825], dtype=float32), 485, [])
(array([-0.15442114, -0.24150789], dtype=float32), 492, [])
(array([-0.31873366, -0.18362333], dtype=float32), 495, [])
(array([-0.3752037 , -0.21346085], dtype=float32), 437, [])
(array([-0.39489666, -0.39668214], dtype=float32), 491, [])
(array([-0.33744532, -0.3117724 ], dtype=float32), 510, [])
(array([-0.32559127, -0.2936158 ], dtype=float32), 552, [])
(array([-0.44260958, -0.31052846], dtype=float32), 507, [])
(array([-0.2605912, -0.3468258], dtype=float32), 442, [])
(array([-0.0285079 , -0.12882802], dtype=float32), 443, [])
(array([-0.47903323, -0.40917808], dtype=float32), 434, [])
(array([-0.02116786, -0.3194019 ], dtype=float32), 470, [])
(array([ 0.03012624, -0.4465443 ], dtype=float32), 519, [])
(array([ 0.01461723, -0.41614798], dtype=float32), 445, [])
(array([ 0.10112689, -0.42757964], dtype=float32), 547, [])
(array([ 0.00096178, -0.4256368 ], dtype=float32), 427, [])
(array([ 0.08004897, -0.37669283], dtype=float32), 462, [])
(array([ 0.04176675, -0.47644302], dtype=float32), 530, [])
(array([-0.16537984, -0.2892541 ], dtype=float32), 544, [])
(array([-0.306, -0.311], dtype=float32), 1134, [])
(array([-0.2223418 ,  0.07301155], dtype=float32), 545, [])
(array([-0.15779577,  0.20526384], dtype=float32), 537, [])
(array([-0.17341577,  0.25802785], dtype=float32), 484, [])
(array([-0.20541406,  0.19686665], dtype=float32), 498, [])
(array([-0.21211863,  0.25516504], dtype=float32), 486, [])
(array([-0.21635936,  0.2918842 ], dtype=float32), 424, [])
(array([-0.28705534,  0.26562765], dtype=float32), 523, [])
(array([-0.15909587,  0.18392089], dtype=float32), 426, [])
(array([-0.29079783,  0.2782079 ], dtype=float32), 558, [])
(array([-0.28866813,  0.2538974 ], dtype=float32), 435, [])
(array([-0.279,  0.331], dtype=float32), 1419, [])
(array([-0.14849806,  0.3325246 ], dtype=float32), 473, [])
(array([-0.19161756,  0.2779683 ], dtype=float32), 463, [])
(array([-0.13054362,  0.21852468], dtype=float32), 529, [])
(array([-0.34370747,  0.30245212], dtype=float32), 449, [])
(array([-0.18451844,  0.15528864], dtype=float32), 451, [])
(array([-0.10251915,  0.30312875], dtype=float32), 439, [])
(array([-0.30765712,  0.14192216], dtype=float32), 483, [])
(array([-0.3760412 ,  0.19006233], dtype=float32), 535, [])
(array([-0.13188556,  0.37197366], dtype=float32), 476, [])
(array([-0.37245134, -0.01385329], dtype=float32), 521, [])
(array([-0.2544999 , -0.37618303], dtype=float32), 504, [])
(array([-0.4135087 ,  0.25385967], dtype=float32), 526, [])
(array([-0.04215002,  0.1724957 ], dtype=float32), 430, [])
(array([-0.00194205,  0.29519528], dtype=float32), 515, [])
(array([0.3837358 , 0.05229524], dtype=float32), 422, [])
(array([0.37475997, 0.06186404], dtype=float32), 421, [])
(array([0.42000076, 0.02597295], dtype=float32), 502, [])
(array([0.34992728, 0.02544886], dtype=float32), 528, [])
(array([0.43887222, 0.04940679], dtype=float32), 460, [])
(array([0.4609509 , 0.11815459], dtype=float32), 431, [])
(array([0.41701967, 0.12372317], dtype=float32), 551, [])
(array([0.3621572 , 0.06436574], dtype=float32), 468, [])
(array([0.49465266, 0.17979793], dtype=float32), 441, [])
(array([0.48232725, 0.12469348], dtype=float32), 513, [])
(array([0.49651977, 0.10092636], dtype=float32), 499, [])
(array([0.45385244, 0.20195913], dtype=float32), 512, [])
(array([ 0.44471627, -0.01551661], dtype=float32), 500, [])
(array([0.37174606, 0.17475067], dtype=float32), 559, [])
(array([0.46094275, 0.25242782], dtype=float32), 425, [])
(array([0.45954886, 0.34999713], dtype=float32), 506, [])
(array([ 0.3446406, -0.0434767], dtype=float32), 488, [])
(array([ 0.37846783, -0.1456026 ], dtype=float32), 554, [])
(array([ 0.39656624, -0.17721927], dtype=float32), 480, [])
(array([ 0.40723523, -0.264714  ], dtype=float32), 540, [])
(array([ 0.3972032 , -0.24921206], dtype=float32), 454, [])
(array([ 0.44429907, -0.16120969], dtype=float32), 489, [])
(array([ 0.44534975, -0.0963626 ], dtype=float32), 457, [])
(array([0.41338733, 0.38406888], dtype=float32), 444, [])
(array([0.3526544 , 0.35437742], dtype=float32), 497, [])
(array([ 0.23783845, -0.0903085 ], dtype=float32), 453, [])
(array([ 0.21069522, -0.2091109 ], dtype=float32), 548, [])
(array([ 0.14226303, -0.19176231], dtype=float32), 465, [])
(array([ 0.19657013, -0.24586739], dtype=float32), 549, [])
(array([ 0.14877723, -0.23731764], dtype=float32), 467, [])
(array([ 0.22211085, -0.20857179], dtype=float32), 524, [])
(array([ 0.16712463, -0.15016797], dtype=float32), 536, [])
(array([ 0.13494077, -0.26652673], dtype=float32), 461, [])
(array([0.35642272, 0.27782825], dtype=float32), 477, [])
(array([0.2516733 , 0.34607178], dtype=float32), 557, [])
(array([0.12565292, 0.356248  ], dtype=float32), 493, [])
(array([0.06363662, 0.3487383 ], dtype=float32), 550, [])
(array([0.12174219, 0.30964896], dtype=float32), 448, [])
(array([0.12838039, 0.29732212], dtype=float32), 474, [])
(array([0.19396456, 0.348473  ], dtype=float32), 527, [])
(array([0.11706619, 0.40029797], dtype=float32), 505, [])
(array([0.10253971, 0.41143864], dtype=float32), 429, [])
(array([0.0196973 , 0.36332282], dtype=float32), 464, [])
(array([0.22948992, 0.35451788], dtype=float32), 428, [])
(array([0.14147592, 0.24053717], dtype=float32), 458, [])
(array([0.14396305, 0.10555546], dtype=float32), 555, [])
(array([0.099, 0.164], dtype=float32), 1399, [])
(array([0.04952065, 0.08109908], dtype=float32), 525, [])
(array([0.1500574, 0.1789734], dtype=float32), 420, [])
(array([-0.3346867 ,  0.13689147], dtype=float32), 423, [])
(array([-0.4505643, -0.3301576], dtype=float32), 471, [])
(array([0.01415403, 0.09449819], dtype=float32), 450, [])
(array([ 0.13457511, -0.0239111 ], dtype=float32), 496, [])
(array([-0.41654658,  0.10941156], dtype=float32), 490, [])
(array([-0.4207215 , -0.20225342], dtype=float32), 478, [])
(array([-0.12595995, -0.4018162 ], dtype=float32), 446, [])
(array([-0.3474201 ,  0.40211508], dtype=float32), 553, [])
(array([0.43605247, 0.39356783], dtype=float32), 466, [])
(array([0.51 , 0.279], dtype=float32), 1143, [])
(array([-0.09490839, -0.43499917], dtype=float32), 556, [])
(array([-0.00337945, -0.26480922], dtype=float32), 494, [])
(array([-0.42806885, -0.06138757], dtype=float32), 517, [])
(array([0.27863753, 0.16649938], dtype=float32), 516, [])
(array([0.16898733, 0.03790466], dtype=float32), 508, [])
(array([0.25792068, 0.46223915], dtype=float32), 522, [])
(array([ 0.33262327, -0.30662692], dtype=float32), 539, [])
(array([ 0.42592672, -0.40157223], dtype=float32), 509, [])
(array([ 0.349, -0.314], dtype=float32), 1445, [])
(array([0.170107  , 0.49195096], dtype=float32), 487, [])
(array([0.39791912, 0.42229268], dtype=float32), 472, [])
(array([0.1833422 , 0.02356736], dtype=float32), 433, [])
(array([ 0.22275412, -0.41054147], dtype=float32), 503, [])
(array([-0.35377243,  0.41186962], dtype=float32), 432, [])
(array([-0.48363855, -0.1851725 ], dtype=float32), 543, [])
(array([ 0.49955466, -0.2354661 ], dtype=float32), 538, [])
(array([ 0.19104274, -0.44128165], dtype=float32), 479, [])
(array([ 0.33460727, -0.4962579 ], dtype=float32), 534, [])
(array([-0.01579325,  0.01695939], dtype=float32), 452, [])
(array([-0.36069998,  0.43330026], dtype=float32), 456, [])
(array([ 0.47015417, -0.42279607], dtype=float32), 459, [])
(array([-0.4800075 ,  0.16966182], dtype=float32), 546, [])
(array([ 0.23974842, -0.4562874 ], dtype=float32), 482, [])
(array([-0.39694965, -0.48924905], dtype=float32), 469, [])
(array([-0.39748487, -0.4920098 ], dtype=float32), 475, [])
(array([-0.16098148,  0.4802888 ], dtype=float32), 533, [])
(array([ 0.46333668, -0.47186807], dtype=float32), 518, [])
(array([-0.641,  0.005], dtype=float32), 1377, [])
(array([-0.507,  0.647], dtype=float32), 1152, [])
(array([ 0.468, -0.731], dtype=float32), 1617, [])
(array([-1.   , -0.044], dtype=float32), 1120, [])
(array([-0.885, -0.165], dtype=float32), 1203, [])
(array([-0.957, -0.012], dtype=float32), 1122, [])
(array([-0.429, -0.717], dtype=float32), 1511, [])
(array([-0.507,  0.929], dtype=float32), 1278, [])
(array([-0.596,  1.48 ], dtype=float32), 1155, [])
(array([-0.726,  1.46 ], dtype=float32), 1567, [])
(array([-0.591,  1.248], dtype=float32), 1199, [])
(array([-0.796,  1.4  ], dtype=float32), 1540, [])
(array([-0.607,  1.308], dtype=float32), 1348, [])
(array([-0.585,  1.621], dtype=float32), 1560, [])
(array([-1.233, -0.294], dtype=float32), 1449, [])
(array([-1.039,  0.056], dtype=float32), 1337, [])
(array([-1.142,  1.539], dtype=float32), 1406, [])
(array([-1.363,  1.205], dtype=float32), 1276, [])
(array([-0.58,  0.89], dtype=float32), 1300, [])
(array([-1.368,  1.339], dtype=float32), 1271, [])
(array([-0.562,  1.055], dtype=float32), 1267, [])
(array([-0.982,  1.5  ], dtype=float32), 1517, [])
(array([-1.423,  1.511], dtype=float32), 1335, [])
(array([-1.27 ,  0.205], dtype=float32), 1167, [])
(array([-1.271, -0.68 ], dtype=float32), 1279, [])
(array([-1.532, -0.23 ], dtype=float32), 1472, [])
(array([-1.845, -0.016], dtype=float32), 1303, [])
(array([0.087, 1.765], dtype=float32), 1198, [])
(array([0.956, 0.49 ], dtype=float32), 1482, [])
(array([5.1641445, 2.3664591], dtype=float32), 323, [])
(array([5.1858306, 2.303635 ], dtype=float32), 383, [])
(array([5.1918507, 2.335915 ], dtype=float32), 281, [])
(array([5.2017627, 2.2406185], dtype=float32), 298, [])
(array([5.2595963, 2.2623496], dtype=float32), 286, [])
(array([5.1484804, 2.3052182], dtype=float32), 358, [])
(array([5.26971  , 2.3338122], dtype=float32), 417, [])
(array([5.249689 , 2.3750389], dtype=float32), 295, [])
(array([5.2184706, 2.2423244], dtype=float32), 338, [])
(array([5.269, 2.253], dtype=float32), 1410, [])
(array([5.1264806, 2.2235978], dtype=float32), 418, [])
(array([5.1307793, 2.1208816], dtype=float32), 326, [])
(array([5.111688, 2.124847], dtype=float32), 407, [])
(array([5.136, 2.047], dtype=float32), 1492, [])
(array([4.8692746, 1.720831 ], dtype=float32), 394, [])
(array([4.8721557, 1.7881918], dtype=float32), 419, [])
(array([4.8331604, 1.7614411], dtype=float32), 312, [])
(array([4.8709073, 1.7311482], dtype=float32), 350, [])
(array([4.8535953, 1.7708011], dtype=float32), 380, [])
(array([4.913521 , 1.8063248], dtype=float32), 386, [])
(array([5.0042763, 1.727379 ], dtype=float32), 335, [])
(array([4.9851646, 1.7498282], dtype=float32), 330, [])
(array([4.9312773, 1.7001566], dtype=float32), 313, [])
(array([4.8061743, 1.8629539], dtype=float32), 290, [])
(array([5.3236938, 1.5434793], dtype=float32), 314, [])
(array([5.2957907, 1.5479581], dtype=float32), 311, [])
(array([5.354442 , 1.5922574], dtype=float32), 332, [])
(array([5.3971925, 1.6245015], dtype=float32), 284, [])
(array([5.389592 , 1.6167791], dtype=float32), 321, [])
(array([5.294133 , 1.5417353], dtype=float32), 305, [])
(array([5.45673  , 1.5867684], dtype=float32), 280, [])
(array([5.383024 , 1.6181362], dtype=float32), 382, [])
(array([5.363, 1.698], dtype=float32), 1186, [])
(array([5.304872 , 1.7510448], dtype=float32), 373, [])
(array([5.320245 , 1.7254914], dtype=float32), 352, [])
(array([5.3383536, 1.7550249], dtype=float32), 377, [])
(array([5.4375105, 1.6447587], dtype=float32), 351, [])
(array([5.272317 , 1.8047028], dtype=float32), 396, [])
(array([5.1918225, 1.90034  ], dtype=float32), 369, [])
(array([5.254624, 1.915545], dtype=float32), 289, [])
(array([5.24735  , 1.8272802], dtype=float32), 300, [])
(array([5.1309195, 1.9296163], dtype=float32), 366, [])
(array([5.01499  , 1.9212719], dtype=float32), 307, [])
(array([5.0591984, 1.9118619], dtype=float32), 401, [])
(array([5.089542, 1.910862], dtype=float32), 399, [])
(array([4.9767346, 1.9628525], dtype=float32), 349, [])
(array([5.0488253, 1.8865685], dtype=float32), 334, [])
(array([5.123037 , 1.9433043], dtype=float32), 403, [])
(array([5.25426  , 1.5374433], dtype=float32), 406, [])
(array([4.9469085, 1.9019626], dtype=float32), 356, [])
(array([4.8930616, 1.9814547], dtype=float32), 416, [])
(array([4.846, 1.914], dtype=float32), 1450, [])
(array([5.409097 , 1.7641969], dtype=float32), 412, [])
(array([5.3507886, 1.9265554], dtype=float32), 324, [])
(array([5.3705935, 1.8524437], dtype=float32), 411, [])
(array([5.4429264, 1.9100183], dtype=float32), 325, [])
(array([5.265591, 1.702881], dtype=float32), 303, [])
(array([4.9139547, 1.8505567], dtype=float32), 343, [])
(array([5.004667 , 1.7689397], dtype=float32), 327, [])
(array([5.2695804, 1.5379263], dtype=float32), 339, [])
(array([4.848753 , 1.9678098], dtype=float32), 301, [])
(array([4.949671, 1.953473], dtype=float32), 378, [])
(array([4.780852 , 1.9322542], dtype=float32), 370, [])
(array([4.6833043, 1.8982141], dtype=float32), 341, [])
(array([5.432637 , 1.7744337], dtype=float32), 340, [])
(array([4.783708, 1.923396], dtype=float32), 320, [])
(array([5.352, 1.878], dtype=float32), 1430, [])
(array([5.2346754, 1.9447967], dtype=float32), 391, [])
(array([5.1883965, 2.4086924], dtype=float32), 415, [])
(array([4.670983 , 1.8235463], dtype=float32), 368, [])
(array([4.60895  , 1.6018836], dtype=float32), 345, [])
(array([4.66134 , 1.549193], dtype=float32), 362, [])
(array([4.583, 1.562], dtype=float32), 1185, [])
(array([4.570781 , 1.5091344], dtype=float32), 329, [])
(array([4.5941553, 1.5761745], dtype=float32), 285, [])
(array([4.670347, 1.645845], dtype=float32), 306, [])
(array([4.613211 , 1.7068776], dtype=float32), 402, [])
(array([4.5856113, 1.7780478], dtype=float32), 331, [])
(array([4.7681518, 1.7804445], dtype=float32), 379, [])
(array([4.5684485, 1.6800994], dtype=float32), 390, [])
(array([4.581575 , 1.8799189], dtype=float32), 359, [])
(array([4.982775 , 1.6202835], dtype=float32), 387, [])
(array([5.05079  , 1.5490581], dtype=float32), 308, [])
(array([5.0710278, 1.6828823], dtype=float32), 363, [])
(array([5.27082  , 1.9774222], dtype=float32), 408, [])
(array([5.4476967, 1.7547507], dtype=float32), 288, [])
(array([5.1586275, 1.5387056], dtype=float32), 282, [])
(array([5.0286136, 2.0321558], dtype=float32), 294, [])
(array([5.370062 , 2.2798576], dtype=float32), 353, [])
(array([5.366562 , 1.9042765], dtype=float32), 316, [])
(array([5.055792 , 1.7730759], dtype=float32), 302, [])
(array([5.1587152, 1.8204979], dtype=float32), 333, [])
(array([4.6876197, 1.8627467], dtype=float32), 367, [])
(array([5.2544456, 1.6783142], dtype=float32), 365, [])
(array([5.1882076, 1.7729446], dtype=float32), 414, [])
(array([5.141687 , 2.4169893], dtype=float32), 344, [])
(array([5.2878494, 1.9920378], dtype=float32), 296, [])
(array([5.1477523, 1.5318764], dtype=float32), 405, [])
(array([5.496409 , 1.5689392], dtype=float32), 309, [])
(array([4.6975875, 2.021777 ], dtype=float32), 384, [])
(array([5.3057876, 2.4500017], dtype=float32), 336, [])
(array([4.636, 1.944], dtype=float32), 1128, [])
(array([4.931804 , 1.5978833], dtype=float32), 315, [])
(array([4.9996357, 2.0598543], dtype=float32), 293, [])
(array([5.3507547, 2.1867192], dtype=float32), 410, [])
(array([5.3984456, 2.3083174], dtype=float32), 322, [])
(array([5.0733995, 2.2124088], dtype=float32), 319, [])
(array([4.5406895, 1.6969985], dtype=float32), 328, [])
(array([5.139334, 1.513385], dtype=float32), 346, [])
(array([5.484701 , 1.9144124], dtype=float32), 348, [])
(array([4.98012 , 2.309744], dtype=float32), 389, [])
(array([4.626509, 2.288333], dtype=float32), 409, [])
(array([4.657, 2.365], dtype=float32), 1373, [])
(array([4.7700915, 2.370804 ], dtype=float32), 361, [])
(array([4.7634344, 2.4162517], dtype=float32), 388, [])
(array([4.7214456, 2.2618706], dtype=float32), 317, [])
(array([4.8655434, 2.4217534], dtype=float32), 337, [])
(array([4.7195616, 2.2106254], dtype=float32), 347, [])
(array([4.6139636, 2.3199208], dtype=float32), 283, [])
(array([4.8555646, 2.335862 ], dtype=float32), 400, [])
(array([4.8004255, 2.232976 ], dtype=float32), 392, [])
(array([4.8246346, 2.1869156], dtype=float32), 304, [])
(array([4.6405625, 2.2414396], dtype=float32), 287, [])
(array([4.9365134, 2.2405744], dtype=float32), 364, [])
(array([4.91879  , 2.2002037], dtype=float32), 297, [])
(array([4.9564786, 2.3873925], dtype=float32), 354, [])
(array([4.7376237, 2.420434 ], dtype=float32), 342, [])
(array([4.745253, 2.47026 ], dtype=float32), 299, [])
(array([5.2009816, 2.0986118], dtype=float32), 374, [])
(array([5.1896043, 2.100851 ], dtype=float32), 292, [])
(array([4.5756383, 2.3576148], dtype=float32), 310, [])
(array([4.7387066, 2.052687 ], dtype=float32), 371, [])
(array([5.0052295, 1.5523248], dtype=float32), 360, [])
(array([4.9669466, 2.486963 ], dtype=float32), 381, [])
(array([4.748598 , 1.5811123], dtype=float32), 372, [])
(array([4.797862 , 2.0877163], dtype=float32), 385, [])
(array([4.5055   , 1.5026239], dtype=float32), 397, [])
(array([4.9632416, 2.1195421], dtype=float32), 375, [])
(array([5.27163, 2.48127], dtype=float32), 355, [])
(array([4.7939   , 1.5614347], dtype=float32), 393, [])
(array([4.934244 , 1.5227143], dtype=float32), 398, [])
(array([4.535, 1.453], dtype=float32), 1615, [])
(array([4.775633 , 1.5676589], dtype=float32), 357, [])
(array([5.4081135, 2.065263 ], dtype=float32), 291, [])
(array([5.3344636, 2.4887064], dtype=float32), 404, [])
(array([4.852, 2.568], dtype=float32), 1183, [])
(array([5.427, 2.087], dtype=float32), 1352, [])
(array([5.0339885, 2.4874692], dtype=float32), 376, [])
(array([4.858, 2.568], dtype=float32), 1220, [])
(array([4.5589924, 2.4948747], dtype=float32), 413, [])
(array([5.486098 , 2.3613276], dtype=float32), 318, [])
(array([5.4783187, 2.281975 ], dtype=float32), 395, [])
(array([4.365, 1.641], dtype=float32), 1384, [])
(array([5.579, 1.931], dtype=float32), 1148, [])
(array([4.631, 2.604], dtype=float32), 1577, [])
(array([5.629, 2.129], dtype=float32), 1422, [])
(array([5.476, 1.343], dtype=float32), 1609, [])
(array([4.357, 2.252], dtype=float32), 1475, [])
(array([5.281, 2.692], dtype=float32), 1212, [])
(array([5.656, 2.398], dtype=float32), 1123, [])
(array([4.286, 2.388], dtype=float32), 1498, [])
(array([4.548, 2.688], dtype=float32), 1173, [])
(array([4.179, 1.58 ], dtype=float32), 1452, [])
(array([4.259, 2.469], dtype=float32), 1485, [])
(array([3.996, 2.268], dtype=float32), 1240, [])
(array([4.206, 1.777], dtype=float32), 1175, [])
(array([4.126, 1.774], dtype=float32), 1142, [])
(array([5.82 , 1.961], dtype=float32), 1251, [])
(array([5.673, 2.836], dtype=float32), 1441, [])
(array([5.639, 3.149], dtype=float32), 1602, [])
(array([5.405, 3.091], dtype=float32), 1345, [])
(array([5.631, 1.246], dtype=float32), 1522, [])
(array([5.14 , 1.111], dtype=float32), 1520, [])
(array([5.211, 0.685], dtype=float32), 1494, [])
(array([5.282, 0.698], dtype=float32), 1415, [])
(array([5.684, 3.385], dtype=float32), 1222, [])
(array([5.078, 0.593], dtype=float32), 1137, [])
(array([5.607, 0.12 ], dtype=float32), 1600, [])
(array([ 5.582e+00, -1.000e-03], dtype=float32), 1144, [])
(array([5.536, 0.11 ], dtype=float32), 1454, [])
(array([ 5.594, -0.081], dtype=float32), 1249, [])
(array([5.334, 0.115], dtype=float32), 1536, [])
(array([5.145, 0.066], dtype=float32), 1210, [])
(array([4.288, 0.405], dtype=float32), 1431, [])
(array([4.48 , 0.296], dtype=float32), 1342, [])
(array([4.589, 0.536], dtype=float32), 1521, [])
(array([4.443, 0.205], dtype=float32), 1400, [])
(array([4.849, 0.249], dtype=float32), 1294, [])
(array([4.462, 0.437], dtype=float32), 1169, [])
(array([ 5.3  , -0.354], dtype=float32), 1525, [])
(array([5.536, 0.554], dtype=float32), 1603, [])
(array([5.53 , 3.364], dtype=float32), 1157, [])
(array([ 5.78 , -0.031], dtype=float32), 1611, [])
(array([3.915, 2.067], dtype=float32), 1132, [])
(array([4.023, 0.329], dtype=float32), 1512, [])
(array([3.88 , 2.084], dtype=float32), 1139, [])
(array([3.932, 1.374], dtype=float32), 1442, [])
(array([5.072, 0.783], dtype=float32), 1446, [])
(array([ 4.578, -0.283], dtype=float32), 1467, [])
(array([ 3.534, -0.843], dtype=float32), 1474, [])
(array([ 3.318, -0.802], dtype=float32), 1161, [])
(array([ 3.323, -0.893], dtype=float32), 1357, [])
(array([ 3.459, -0.757], dtype=float32), 1556, [])
(array([ 3.797, -0.84 ], dtype=float32), 1447, [])
(array([ 4.162, -0.702], dtype=float32), 1208, [])
(array([ 3.142, -0.803], dtype=float32), 1528, [])
(array([ 3.734, -0.68 ], dtype=float32), 1526, [])
(array([ 4.474, -0.709], dtype=float32), 1269, [])
(array([ 3.042, -0.759], dtype=float32), 1589, [])
(array([ 3.9  , -0.917], dtype=float32), 1495, [])
(array([ 4.632, -0.721], dtype=float32), 1404, [])
(array([ 4.259, -0.435], dtype=float32), 1258, [])
(array([ 3.106, -0.314], dtype=float32), 1280, [])
(array([2.36 , 0.216], dtype=float32), 1405, [])
(array([2.604, 0.12 ], dtype=float32), 1318, [])
(array([2.261, 0.124], dtype=float32), 1200, [])
(array([2.074, 0.194], dtype=float32), 1215, [])
(array([2.214, 0.495], dtype=float32), 1417, [])
(array([2.539, 0.42 ], dtype=float32), 1387, [])
(array([2.822, 0.073], dtype=float32), 1553, [])
(array([ 3.039, -0.126], dtype=float32), 1311, [])
(array([3.111, 0.119], dtype=float32), 1581, [])
(array([ 3.302, -0.24 ], dtype=float32), 1613, [])
(array([3.253, 0.175], dtype=float32), 1414, [])
(array([3.472, 0.053], dtype=float32), 1432, [])
(array([ 4.477, -0.852], dtype=float32), 1570, [])
(array([ 2.586, -0.221], dtype=float32), 1590, [])
(array([1.768, 0.419], dtype=float32), 1464, [])
(array([1.309, 0.222], dtype=float32), 1299, [])
(array([ 2.068e+00, -2.000e-03], dtype=float32), 1321, [])
(array([-1.287, -0.7  ], dtype=float32), 1211, [])
(array([0.85 , 6.844], dtype=float32), 1338, [])
(array([-1.675,  4.427], dtype=float32), 1330, [])
(array([5.929, 3.006], dtype=float32), 1408, [])
(array([-2.209,  2.085], dtype=float32), 1350, [])
(array([-3.0605054 ,  0.78962433], dtype=float32), 68, [])
(array([-3.093062  ,  0.81504476], dtype=float32), 28, [])
(array([-3.0813456,  0.843306 ], dtype=float32), 122, [])
(array([-3.0337462 ,  0.79093224], dtype=float32), 75, [])
(array([-3.0362828 ,  0.79336977], dtype=float32), 126, [])
(array([-3.1148083,  0.7784653], dtype=float32), 123, [])
(array([-3.1254973 ,  0.85762763], dtype=float32), 85, [])
(array([-2.9702652 ,  0.75178766], dtype=float32), 20, [])
(array([-3.0122795,  0.7019133], dtype=float32), 3, [])
(array([-2.922277 ,  0.7540743], dtype=float32), 117, [])
(array([-2.7885091,  0.7601771], dtype=float32), 114, [])
(array([-2.8304112 ,  0.70152366], dtype=float32), 91, [])
(array([-2.8287892,  0.7682532], dtype=float32), 109, [])
(array([-2.8203256 ,  0.79505557], dtype=float32), 0, [])
(array([-2.8228443 ,  0.75613964], dtype=float32), 111, [])
(array([-2.716644 ,  0.7184859], dtype=float32), 62, [])
(array([-2.601027  ,  0.59200877], dtype=float32), 84, [])
(array([-2.5995915 ,  0.62880415], dtype=float32), 108, [])
(array([-2.649504 ,  0.5681938], dtype=float32), 92, [])
(array([-2.7062225 ,  0.62258965], dtype=float32), 10, [])
(array([-2.748086  ,  0.61561126], dtype=float32), 120, [])
(array([-2.588588 ,  0.6435717], dtype=float32), 81, [])
(array([-2.6801133,  0.6458868], dtype=float32), 56, [])
(array([-2.6835785,  0.6416802], dtype=float32), 63, [])
(array([-2.5432723 ,  0.57533467], dtype=float32), 31, [])
(array([-2.551503  ,  0.66427314], dtype=float32), 112, [])
(array([-2.591724  ,  0.54375726], dtype=float32), 99, [])
(array([-2.710506 ,  0.5433742], dtype=float32), 136, [])
(array([-2.791379  ,  0.63937306], dtype=float32), 94, [])
(array([-2.537767 ,  0.6905222], dtype=float32), 23, [])
(array([-3.1311836,  0.9208957], dtype=float32), 13, [])
(array([-3.407395 ,  1.3282073], dtype=float32), 58, [])
(array([-3.3711972,  1.2768049], dtype=float32), 134, [])
(array([-3.3272295,  1.3083545], dtype=float32), 119, [])
(array([-3.3131888,  1.2948827], dtype=float32), 18, [])
(array([-3.3570316,  1.3435366], dtype=float32), 70, [])
(array([-3.2868805,  1.3606929], dtype=float32), 66, [])
(array([-3.423393 ,  1.3133508], dtype=float32), 37, [])
(array([-3.357,  1.36 ], dtype=float32), 1244, [])
(array([-3.4488857,  1.3175195], dtype=float32), 78, [])
(array([-3.2682807,  1.3289472], dtype=float32), 127, [])
(array([-3.213665 ,  1.3279133], dtype=float32), 89, [])
(array([-3.1532283,  1.2901508], dtype=float32), 42, [])
(array([-3.0639846,  1.2875223], dtype=float32), 115, [])
(array([-2.950253 ,  1.3536725], dtype=float32), 93, [])
(array([-2.9165456,  1.4073968], dtype=float32), 26, [])
(array([-2.9700727,  1.3263532], dtype=float32), 102, [])
(array([-2.920525,  1.411729], dtype=float32), 131, [])
(array([-3.209786 ,  1.2252249], dtype=float32), 98, [])
(array([-3.2480047,  1.0320785], dtype=float32), 34, [])
(array([-3.2313054 ,  0.96800953], dtype=float32), 15, [])
(array([-3.197803 ,  1.0373007], dtype=float32), 39, [])
(array([-3.286,  0.962], dtype=float32), 1538, [])
(array([-3.226194 ,  1.1216741], dtype=float32), 44, [])
(array([-3.2700295,  0.8927008], dtype=float32), 2, [])
(array([-3.3660722 ,  0.88506025], dtype=float32), 116, [])
(array([-3.356803 ,  0.8360321], dtype=float32), 52, [])
(array([-3.4697957,  0.8972671], dtype=float32), 72, [])
(array([-3.1958   ,  1.1208075], dtype=float32), 67, [])
(array([-3.1632566,  1.3396674], dtype=float32), 74, [])
(array([-3.3940642,  0.7488767], dtype=float32), 14, [])
(array([-3.2131932,  1.0153794], dtype=float32), 82, [])
(array([-3.3191435,  1.0182569], dtype=float32), 124, [])
(array([-3.465283 ,  1.3465531], dtype=float32), 22, [])
(array([-2.8640227,  1.3513772], dtype=float32), 80, [])
(array([-3.3997009,  0.675144 ], dtype=float32), 35, [])
(array([-3.4347053,  0.5694115], dtype=float32), 7, [])
(array([-3.333252  ,  0.58566415], dtype=float32), 132, [])
(array([-3.139244 ,  1.3874327], dtype=float32), 19, [])
(array([-3.331,  0.586], dtype=float32), 1365, [])
(array([-3.40004   ,  0.93904334], dtype=float32), 33, [])
(array([-3.3247833,  1.2306769], dtype=float32), 1, [])
(array([-3.3946993 ,  0.92498726], dtype=float32), 4, [])
(array([-3.3563378,  0.567158 ], dtype=float32), 38, [])
(array([-3.4664025,  1.4027725], dtype=float32), 135, [])
(array([-3.4947653,  0.8668689], dtype=float32), 9, [])
(array([-3.0257082,  1.350822 ], dtype=float32), 41, [])
(array([-3.384,  0.76 ], dtype=float32), 1254, [])
(array([-3.0327113,  1.3302839], dtype=float32), 95, [])
(array([-3.3919773,  0.7969168], dtype=float32), 49, [])
(array([-2.8416607,  1.251804 ], dtype=float32), 53, [])
(array([-2.567534  ,  0.90967834], dtype=float32), 101, [])
(array([-2.5721135 ,  0.90363526], dtype=float32), 79, [])
(array([-2.6268702,  0.97104  ], dtype=float32), 83, [])
(array([-2.6297824 ,  0.94579196], dtype=float32), 57, [])
(array([-2.6602616 ,  0.99856997], dtype=float32), 16, [])
(array([-2.5785644,  1.0266947], dtype=float32), 50, [])
(array([-2.7174702 ,  0.92373186], dtype=float32), 104, [])
(array([-2.5229335 ,  0.96064794], dtype=float32), 46, [])
(array([-2.7060483,  1.073662 ], dtype=float32), 100, [])
(array([-2.7462113,  1.1481986], dtype=float32), 77, [])
(array([-2.8252134,  1.1080303], dtype=float32), 40, [])
(array([-2.7922757,  1.104138 ], dtype=float32), 87, [])
(array([-2.8090286,  1.1930337], dtype=float32), 43, [])
(array([-2.905179 ,  1.1806748], dtype=float32), 121, [])
(array([-2.937876 ,  1.1569281], dtype=float32), 64, [])
(array([-2.9038832,  1.1489655], dtype=float32), 25, [])
(array([-2.965399 ,  1.0676283], dtype=float32), 125, [])
(array([-2.9216375,  1.1442584], dtype=float32), 130, [])
(array([-2.7089746,  1.1585218], dtype=float32), 86, [])
(array([-2.6423888,  1.1642683], dtype=float32), 113, [])
(array([-3.0155053,  1.1977872], dtype=float32), 69, [])
(array([-2.8618336,  1.038572 ], dtype=float32), 5, [])
(array([-2.5344627,  1.1861681], dtype=float32), 47, [])
(array([-3.3209734,  1.0817521], dtype=float32), 107, [])
(array([-3.3346267,  0.5273336], dtype=float32), 97, [])
(array([-3.141971 ,  0.5720246], dtype=float32), 139, [])
(array([-3.1305475 ,  0.58592236], dtype=float32), 60, [])
(array([-3.1549888 ,  0.59329957], dtype=float32), 51, [])
(array([-3.146719  ,  0.51433736], dtype=float32), 54, [])
(array([-3.1201599 ,  0.51552594], dtype=float32), 21, [])
(array([-3.110983 ,  0.6008781], dtype=float32), 129, [])
(array([-3.209604  ,  0.51712793], dtype=float32), 118, [])
(array([-3.2113717,  0.6480725], dtype=float32), 103, [])
(array([-3.0480812,  0.5114199], dtype=float32), 24, [])
(array([-2.5947223,  1.2812166], dtype=float32), 73, [])
(array([-2.6264787,  1.4026576], dtype=float32), 59, [])
(array([-2.5363994,  1.3626425], dtype=float32), 12, [])
(array([-2.5918598,  1.4587942], dtype=float32), 55, [])
(array([-2.6338797,  1.4856656], dtype=float32), 11, [])
(array([-3.1725273,  1.4142213], dtype=float32), 137, [])
(array([-3.215207 ,  0.7045686], dtype=float32), 90, [])
(array([-3.2571406,  0.7588734], dtype=float32), 110, [])
(array([-2.538053 ,  1.3087814], dtype=float32), 27, [])
(array([-3.186101 ,  1.2014544], dtype=float32), 48, [])
(array([-3.057069 ,  1.2029227], dtype=float32), 128, [])
(array([-2.796336 ,  0.8898301], dtype=float32), 133, [])
(array([-2.5649338,  1.3317238], dtype=float32), 6, [])
(array([-3.4009185,  1.1835765], dtype=float32), 29, [])
(array([-2.7030215,  1.3864396], dtype=float32), 88, [])
(array([-3.0166738 ,  0.51542085], dtype=float32), 45, [])
(array([-3.2508743 ,  0.80079734], dtype=float32), 8, [])
(array([-2.7476745,  1.3334329], dtype=float32), 106, [])
(array([-2.741,  1.396], dtype=float32), 1178, [])
(array([-2.551263 ,  1.1472908], dtype=float32), 76, [])
(array([-2.5925336,  1.4940304], dtype=float32), 65, [])
(array([-3.4602041,  0.6661857], dtype=float32), 30, [])
(array([-3.3698306,  1.1222835], dtype=float32), 17, [])
(array([-2.5199192,  0.8747774], dtype=float32), 71, [])
(array([-2.9796252,  1.0133127], dtype=float32), 138, [])
(array([-2.5387974,  1.1151025], dtype=float32), 32, [])
(array([-3.194495 ,  1.4842395], dtype=float32), 105, [])
(array([-3.547,  0.877], dtype=float32), 1392, [])
(array([-2.8096004,  0.9398897], dtype=float32), 96, [])
(array([-2.53 ,  1.539], dtype=float32), 1131, [])
(array([-2.44 ,  1.404], dtype=float32), 1343, [])
(array([-3.0060565,  0.9881151], dtype=float32), 36, [])
(array([-2.9050777,  1.4761287], dtype=float32), 61, [])
(array([-3.606,  0.862], dtype=float32), 1614, [])
(array([-2.383,  0.689], dtype=float32), 1213, [])
(array([-2.574,  1.695], dtype=float32), 1424, [])
(array([-2.901,  0.422], dtype=float32), 1237, [])
(array([-3.582,  1.529], dtype=float32), 1489, [])
(array([-3.515,  1.604], dtype=float32), 1188, [])
(array([-2.918,  0.314], dtype=float32), 1356, [])
(array([-2.957,  1.703], dtype=float32), 1394, [])
(array([-3.205,  0.091], dtype=float32), 1433, [])
(array([-3.448,  0.107], dtype=float32), 1503, [])
(array([-2.726,  1.856], dtype=float32), 1437, [])
(array([-2.288,  1.752], dtype=float32), 1151, [])
(array([-3.853,  0.751], dtype=float32), 1569, [])
(array([-3.25 ,  0.081], dtype=float32), 1596, [])
(array([-2.949, -0.152], dtype=float32), 1323, [])
(array([-2.15 ,  1.189], dtype=float32), 1158, [])
(array([-3.43 , -0.028], dtype=float32), 1313, [])
(array([-3.699,  0.308], dtype=float32), 1358, [])
(array([-3.752,  1.7  ], dtype=float32), 1554, [])
(array([-2.904, -0.22 ], dtype=float32), 1506, [])
(array([-3.904,  1.216], dtype=float32), 1368, [])
(array([-3.768,  0.158], dtype=float32), 1246, [])
(array([-3.727, -0.318], dtype=float32), 1545, [])
(array([-2.693,  2.043], dtype=float32), 1608, [])
(array([-3.977,  1.415], dtype=float32), 1324, [])
(array([-1.018,  3.557], dtype=float32), 1146, [])
(array([1.461, 6.696], dtype=float32), 1302, [])
(array([3.2219799, 5.609324 ], dtype=float32), 168, [])
(array([3.2381618, 5.5506372], dtype=float32), 203, [])
(array([3.2302787, 5.606859 ], dtype=float32), 196, [])
(array([3.283, 5.556], dtype=float32), 1493, [])
(array([3.2471073, 5.5298123], dtype=float32), 182, [])
(array([3.1723893, 5.6391625], dtype=float32), 239, [])
(array([3.2530944, 5.632883 ], dtype=float32), 246, [])
(array([3.2800367, 5.5377517], dtype=float32), 202, [])
(array([3.1819515, 5.6235876], dtype=float32), 153, [])
(array([3.096373 , 5.6583924], dtype=float32), 143, [])
(array([3.077814 , 5.6458945], dtype=float32), 262, [])
(array([3.318701 , 5.6456103], dtype=float32), 208, [])
(array([3.114287 , 5.5631227], dtype=float32), 250, [])
(array([3.3110383, 5.5181623], dtype=float32), 199, [])
(array([3.3692284, 5.601248 ], dtype=float32), 277, [])
(array([3.0717387, 5.6642556], dtype=float32), 155, [])
(array([3.3221967, 5.7560325], dtype=float32), 181, [])
(array([3.2954662, 5.7987766], dtype=float32), 142, [])
(array([3.2612178, 5.863163 ], dtype=float32), 195, [])
(array([3.0321326, 5.938058 ], dtype=float32), 232, [])
(array([2.9803214, 5.990684 ], dtype=float32), 268, [])
(array([2.9777868, 5.916138 ], dtype=float32), 248, [])
(array([2.9690046, 5.89522  ], dtype=float32), 201, [])
(array([3.0430436, 5.9682603], dtype=float32), 148, [])
(array([3.0365248, 5.8902597], dtype=float32), 179, [])
(array([3.0644617, 5.831609 ], dtype=float32), 259, [])
(array([2.9682677, 5.9369187], dtype=float32), 229, [])
(array([3.0890574, 5.815996 ], dtype=float32), 188, [])
(array([3.1269324, 5.8883553], dtype=float32), 144, [])
(array([3.0359614, 6.0221515], dtype=float32), 156, [])
(array([2.9703145, 5.836849 ], dtype=float32), 149, [])
(array([3.196168 , 5.9212174], dtype=float32), 187, [])
(array([3.140999, 5.852569], dtype=float32), 189, [])
(array([3.1139176, 5.945556 ], dtype=float32), 175, [])
(array([3.1349485, 5.812966 ], dtype=float32), 258, [])
(array([3.2251842, 5.7873993], dtype=float32), 178, [])
(array([3.3193057, 5.8056765], dtype=float32), 257, [])
(array([2.9716995, 6.035265 ], dtype=float32), 241, [])
(array([3.1945736, 6.0042453], dtype=float32), 224, [])
(array([3.274352, 5.755031], dtype=float32), 275, [])
(array([3.2140374, 5.966393 ], dtype=float32), 157, [])
(array([3.3100514, 5.9133797], dtype=float32), 200, [])
(array([3.0856056, 5.7003503], dtype=float32), 152, [])
(array([3.023307, 5.792311], dtype=float32), 256, [])
(array([2.867, 6.053], dtype=float32), 1273, [])
(array([2.5544832, 6.1766706], dtype=float32), 216, [])
(array([2.5856469, 6.222172 ], dtype=float32), 279, [])
(array([2.5252292, 6.2838674], dtype=float32), 207, [])
(array([2.5323322, 6.3466263], dtype=float32), 214, [])
(array([2.5574465, 6.3192105], dtype=float32), 244, [])
(array([2.5480428, 6.281159 ], dtype=float32), 161, [])
(array([2.522863, 6.301294], dtype=float32), 158, [])
(array([2.5191674, 6.2276244], dtype=float32), 245, [])
(array([2.5674825, 6.4014125], dtype=float32), 194, [])
(array([2.5175257, 6.371877 ], dtype=float32), 255, [])
(array([2.612134, 6.187424], dtype=float32), 167, [])
(array([2.686716, 6.105447], dtype=float32), 230, [])
(array([2.747, 6.135], dtype=float32), 1214, [])
(array([2.8075182, 6.1818047], dtype=float32), 267, [])
(array([2.733048, 6.207873], dtype=float32), 238, [])
(array([2.6510742, 6.1986094], dtype=float32), 180, [])
(array([2.7442622, 6.2054014], dtype=float32), 234, [])
(array([2.7280834, 6.0518894], dtype=float32), 166, [])
(array([2.796376 , 6.1501384], dtype=float32), 154, [])
(array([2.58382 , 6.433167], dtype=float32), 264, [])
(array([2.5412114, 6.1336927], dtype=float32), 226, [])
(array([2.793865 , 6.0124345], dtype=float32), 260, [])
(array([2.6711295, 6.136788 ], dtype=float32), 151, [])
(array([2.6962955, 6.047108 ], dtype=float32), 171, [])
(array([2.7065067, 6.0441885], dtype=float32), 191, [])
(array([2.8188744, 6.1416802], dtype=float32), 218, [])
(array([2.526287 , 6.0826883], dtype=float32), 204, [])
(array([2.56928  , 6.0477643], dtype=float32), 165, [])
(array([2.5162475, 6.131435 ], dtype=float32), 205, [])
(array([2.6543665, 6.449145 ], dtype=float32), 150, [])
(array([2.7126856, 6.4199843], dtype=float32), 184, [])
(array([2.6819391, 6.2617416], dtype=float32), 176, [])
(array([2.6338413, 6.32107  ], dtype=float32), 186, [])
(array([2.6334841, 5.9833794], dtype=float32), 231, [])
(array([2.7300763, 5.936771 ], dtype=float32), 272, [])
(array([2.7979991, 6.444705 ], dtype=float32), 177, [])
(array([2.6893213, 6.446035 ], dtype=float32), 251, [])
(array([2.5528328, 6.023293 ], dtype=float32), 222, [])
(array([2.522495 , 6.4577527], dtype=float32), 163, [])
(array([2.6468787, 5.8723664], dtype=float32), 162, [])
(array([2.731, 5.81 ], dtype=float32), 1170, [])
(array([2.6913807, 6.3981724], dtype=float32), 265, [])
(array([2.7858334, 5.712353 ], dtype=float32), 140, [])
(array([2.697001 , 5.8862767], dtype=float32), 198, [])
(array([3.3536568, 5.8998065], dtype=float32), 228, [])
(array([3.194, 5.986], dtype=float32), 1180, [])
(array([2.6811237, 5.766616 ], dtype=float32), 172, [])
(array([2.8083215, 6.42744  ], dtype=float32), 169, [])
(array([2.906576, 6.360415], dtype=float32), 211, [])
(array([2.9075096, 6.2475314], dtype=float32), 225, [])
(array([3.263125 , 6.0854526], dtype=float32), 209, [])
(array([3.3932698, 6.3896537], dtype=float32), 185, [])
(array([3.4187844, 6.3383865], dtype=float32), 263, [])
(array([3.3819504, 6.406865 ], dtype=float32), 233, [])
(array([3.3307946, 6.355454 ], dtype=float32), 159, [])
(array([3.2916856, 6.29012  ], dtype=float32), 160, [])
(array([3.193, 6.144], dtype=float32), 1566, [])
(array([3.1940866, 6.238193 ], dtype=float32), 212, [])
(array([3.147395 , 6.3262873], dtype=float32), 243, [])
(array([3.0985756, 6.28218  ], dtype=float32), 270, [])
(array([3.195658 , 6.3195915], dtype=float32), 215, [])
(array([3.404403, 6.293403], dtype=float32), 273, [])
(array([3.4585962, 6.392901 ], dtype=float32), 146, [])
(array([3.0898902, 6.293631 ], dtype=float32), 219, [])
(array([3.236301, 6.202225], dtype=float32), 227, [])
(array([2.8543303, 6.0623193], dtype=float32), 274, [])
(array([2.8038812, 6.302321 ], dtype=float32), 192, [])
(array([3.3533564, 5.922819 ], dtype=float32), 254, [])
(array([2.5126991, 5.963875 ], dtype=float32), 213, [])
(array([3.0866854, 6.317375 ], dtype=float32), 190, [])
(array([2.537688 , 6.4898596], dtype=float32), 193, [])
(array([3.1352253, 6.0878153], dtype=float32), 145, [])
(array([3.19116  , 6.1983585], dtype=float32), 261, [])
(array([2.980932, 6.075826], dtype=float32), 174, [])
(array([2.899733, 5.85593 ], dtype=float32), 237, [])
(array([3.469, 6.401], dtype=float32), 1462, [])
(array([3.373936, 5.627343], dtype=float32), 278, [])
(array([2.8899157, 6.417772 ], dtype=float32), 276, [])
(array([2.8995762, 5.731698 ], dtype=float32), 236, [])
(array([2.9461386, 5.623259 ], dtype=float32), 223, [])
(array([2.8436446, 5.5988336], dtype=float32), 197, [])
(array([3.3462684, 6.1397595], dtype=float32), 252, [])
(array([3.325, 6.028], dtype=float32), 1374, [])
(array([2.7749627, 5.7527823], dtype=float32), 183, [])
(array([2.8982959, 5.708856 ], dtype=float32), 206, [])
(array([2.9584508, 6.279111 ], dtype=float32), 210, [])
(array([3.481361 , 6.2737184], dtype=float32), 240, [])
(array([2.9800746, 6.2363286], dtype=float32), 141, [])
(array([3.017, 5.541], dtype=float32), 1453, [])
(array([2.7858534, 5.9289   ], dtype=float32), 253, [])
(array([2.9418488, 6.434072 ], dtype=float32), 269, [])
(array([2.5970738, 5.7422285], dtype=float32), 235, [])
(array([2.781259 , 5.5889125], dtype=float32), 170, [])
(array([2.8030577, 5.603399 ], dtype=float32), 220, [])
(array([2.536, 5.846], dtype=float32), 1523, [])
(array([2.9520197, 5.575962 ], dtype=float32), 266, [])
(array([3.3810222, 6.176749 ], dtype=float32), 221, [])
(array([2.453, 5.73 ], dtype=float32), 1551, [])
(array([3.0403204, 6.4308977], dtype=float32), 173, [])
(array([2.531722 , 5.8125086], dtype=float32), 242, [])
(array([3.3960493, 6.170569 ], dtype=float32), 217, [])
(array([2.544369 , 5.6100173], dtype=float32), 271, [])
(array([2.693, 5.548], dtype=float32), 1162, [])
(array([3.4625392, 5.728376 ], dtype=float32), 249, [])
(array([2.846, 6.536], dtype=float32), 1519, [])
(array([2.6631248, 5.5117393], dtype=float32), 164, [])
(array([2.5213952, 5.6240063], dtype=float32), 247, [])
(array([3.464676, 5.507182], dtype=float32), 147, [])
(array([3.028, 6.636], dtype=float32), 1363, [])
(array([2.321, 6.415], dtype=float32), 1193, [])
(array([2.317, 6.463], dtype=float32), 1247, [])
(array([3.136, 6.567], dtype=float32), 1346, [])
(array([3.198, 6.579], dtype=float32), 1295, [])
(array([3.595, 5.956], dtype=float32), 1480, [])
(array([2.533, 5.33 ], dtype=float32), 1524, [])
(array([3.328, 6.785], dtype=float32), 1562, [])
(array([2.625, 6.737], dtype=float32), 1586, [])
(array([2.341, 6.627], dtype=float32), 1585, [])
(array([3.594, 6.634], dtype=float32), 1440, [])
(array([3.676, 6.113], dtype=float32), 1238, [])
(array([3.047, 6.881], dtype=float32), 1438, [])
(array([3.632, 6.614], dtype=float32), 1390, [])
(array([3.323, 6.854], dtype=float32), 1164, [])
(array([3.302, 5.197], dtype=float32), 1121, [])
(array([1.98 , 6.558], dtype=float32), 1544, [])
(array([3.146, 6.957], dtype=float32), 1451, [])
(array([2.258, 5.271], dtype=float32), 1353, [])
(array([3.252, 5.115], dtype=float32), 1129, [])
(array([2.063, 6.28 ], dtype=float32), 1354, [])
(array([2.123, 5.505], dtype=float32), 1355, [])
(array([3.616, 4.955], dtype=float32), 1434, [])
(array([1.978, 6.712], dtype=float32), 1168, [])
(array([2.218, 5.001], dtype=float32), 1156, [])
(array([3.873, 5.324], dtype=float32), 1463, [])
(array([2.211, 4.978], dtype=float32), 1268, [])
(array([2.013, 4.931], dtype=float32), 1288, [])
(array([2.064, 4.865], dtype=float32), 1264, [])
(array([3.757, 5.098], dtype=float32), 1281, [])
(array([-3.934,  0.413], dtype=float32), 1572, [])
(array([ 4.945, -0.969], dtype=float32), 1513, [])
(array([-0.929,  3.821], dtype=float32), 1533, [])
(array([-1.671,  5.015], dtype=float32), 1597, [])
(array([2.644, 0.658], dtype=float32), 1209, [])
(array([0.292, 6.993], dtype=float32), 1233, [])
(array([0.975, 1.032], dtype=float32), 1510, [])
(array([0.765, 3.961], dtype=float32), 1291, [])
(array([2.903, 3.97 ], dtype=float32), 1310, [])
(array([-3.975,  5.417], dtype=float32), 1496, [])
(array([-1.227,  5.803], dtype=float32), 1296, [])
(array([-0.876,  0.619], dtype=float32), 1319, [])
(array([ 5.084, -0.411], dtype=float32), 1534, [])
(array([-1.628,  1.977], dtype=float32), 1145, [])
(array([-1.692,  1.581], dtype=float32), 1140, [])
(array([1.02 , 5.573], dtype=float32), 1159, [])
(array([0.738, 4.894], dtype=float32), 1351, [])
(array([0.79 , 4.916], dtype=float32), 1177, [])
(array([0.826, 5.   ], dtype=float32), 1501, [])
(array([0.881, 4.835], dtype=float32), 1389, [])
(array([0.788, 5.072], dtype=float32), 1518, [])
(array([0.599, 4.834], dtype=float32), 1548, [])
(array([1.031, 5.306], dtype=float32), 1378, [])
(array([0.671, 6.984], dtype=float32), 1227, [])
(array([4.058, 4.894], dtype=float32), 1243, [])
(array([5.057, 4.966], dtype=float32), 1592, [])
(array([4.836, 5.034], dtype=float32), 1336, [])
(array([5.122, 5.314], dtype=float32), 1305, [])
(array([5.212, 5.043], dtype=float32), 1252, [])
(array([4.722, 5.131], dtype=float32), 1573, [])
(array([5.318, 5.196], dtype=float32), 1386, [])
(array([4.876, 4.76 ], dtype=float32), 1471, [])
(array([5.372, 5.6  ], dtype=float32), 1306, [])
(array([4.536, 5.177], dtype=float32), 1236, [])
(array([-2.982,  6.235], dtype=float32), 1531, [])
(array([ 5.381, -0.883], dtype=float32), 1476, [])
(array([2.987, 1.999], dtype=float32), 1421, [])
(array([5.949, 2.592], dtype=float32), 1259, [])
(array([-2.849, -0.35 ], dtype=float32), 1444, [])
(array([3.958, 4.566], dtype=float32), 1376, [])
(array([4.022, 4.095], dtype=float32), 1468, [])
(array([3.671, 4.116], dtype=float32), 1396, [])
(array([-3.344,  2.099], dtype=float32), 1607, [])
(array([-1.708, -0.307], dtype=float32), 1262, [])
(array([3.475, 0.476], dtype=float32), 1224, [])
(array([2.809, 4.425], dtype=float32), 1532, [])
(array([-2.789, -0.378], dtype=float32), 1465, [])
(array([-2.918,  6.275], dtype=float32), 1225, [])
(array([-2.508,  6.855], dtype=float32), 1539, [])
(array([-2.18 ,  6.872], dtype=float32), 1339, [])
(array([-2.361,  6.563], dtype=float32), 1282, [])
(array([-2.551,  6.727], dtype=float32), 1568, [])
(array([-2.186,  6.979], dtype=float32), 1317, [])
(array([ 1.578, -0.132], dtype=float32), 1234, [])
(array([3.829, 3.857], dtype=float32), 1217, [])
(array([5.709, 3.728], dtype=float32), 1191, [])
(array([-2.17 ,  6.281], dtype=float32), 1507, [])
(array([ 3.713, -0.228], dtype=float32), 1587, [])
(array([-3.954,  4.427], dtype=float32), 1411, [])
(array([-1.361,  0.955], dtype=float32), 1165, [])
(array([1.412, 0.115], dtype=float32), 1195, [])
(array([1.19 , 5.465], dtype=float32), 1260, [])
(array([-1.692,  6.609], dtype=float32), 1418, [])
(array([-1.825,  0.284], dtype=float32), 1584, [])
(array([-1.252,  2.966], dtype=float32), 1407, [])
(array([3.116, 1.923], dtype=float32), 1309, [])
(array([-0.818, -0.913], dtype=float32), 1333, [])
(array([3.74 , 1.405], dtype=float32), 1126, [])
(array([ 5.24 , -0.644], dtype=float32), 1381, [])
(array([0.3  , 4.683], dtype=float32), 1582, [])
(array([-2.833,  6.909], dtype=float32), 1456, [])
(array([-0.284,  4.549], dtype=float32), 1261, [])
(array([-2.079,  0.166], dtype=float32), 1610, [])
(array([3.947, 3.96 ], dtype=float32), 1334, [])
(array([-1.528,  2.18 ], dtype=float32), 1380, [])
(array([3.387, 4.386], dtype=float32), 1483, [])
(array([-1.794,  6.8  ], dtype=float32), 1398, [])
(array([-2.204,  0.062], dtype=float32), 1248, [])
(array([-0.338,  4.536], dtype=float32), 1253, [])
(array([3.29 , 1.908], dtype=float32), 1229, [])
(array([ 1.958, -0.415], dtype=float32), 1478, [])
(array([-1.045, -0.786], dtype=float32), 1226, [])
(array([-1.785,  4.016], dtype=float32), 1230, [])
(array([-3.174,  6.827], dtype=float32), 1341, [])
(array([-1.416,  2.954], dtype=float32), 1565, [])
(array([-3.534,  6.17 ], dtype=float32), 1153, [])
(array([3.955, 0.813], dtype=float32), 1606, [])
(array([4.095, 5.674], dtype=float32), 1149, [])
(array([4.571, 6.088], dtype=float32), 1232, [])
(array([2.075, 0.853], dtype=float32), 1460, [])
(array([4.288, 5.644], dtype=float32), 1133, [])
(array([5.2  , 3.694], dtype=float32), 1331, [])
(array([3.019, 4.731], dtype=float32), 1257, [])
(array([-2.048,  2.503], dtype=float32), 1190, [])
(array([-2.947,  2.458], dtype=float32), 1555, [])
(array([-3.473,  3.317], dtype=float32), 1486, [])
(array([-3.204,  3.468], dtype=float32), 1580, [])
(array([-3.005,  3.156], dtype=float32), 1612, [])
(array([-3.314,  3.03 ], dtype=float32), 1591, [])
(array([-3.401,  3.552], dtype=float32), 1385, [])
(array([-3.268,  2.888], dtype=float32), 1469, [])
(array([-2.797,  2.983], dtype=float32), 1270, [])
(array([-3.003,  3.538], dtype=float32), 1205, [])
(array([-2.166,  6.213], dtype=float32), 1388, [])
(array([-3.813,  3.23 ], dtype=float32), 1466, [])
(array([2.328, 1.19 ], dtype=float32), 1391, [])
(array([1.385, 0.535], dtype=float32), 1277, [])
(array([ 0.819, -0.927], dtype=float32), 1575, [])
(array([2.969, 0.756], dtype=float32), 1594, [])
(array([-2.295,  3.621], dtype=float32), 1457, [])
(array([-2.233, -0.546], dtype=float32), 1194, [])
(array([-1.234,  5.933], dtype=float32), 1473, [])
(array([-1.519,  0.871], dtype=float32), 1171, [])
(array([1.104, 2.52 ], dtype=float32), 1150, [])
(array([-3.657, -0.53 ], dtype=float32), 1255, [])
(array([3.369, 1.442], dtype=float32), 1231, [])
(array([5.896, 1.128], dtype=float32), 1184, [])
(array([1.357, 5.708], dtype=float32), 1289, [])
(array([-0.022,  4.617], dtype=float32), 1187, [])
(array([5.485, 6.234], dtype=float32), 1542, [])
(array([5.414, 6.814], dtype=float32), 1370, [])
(array([5.127, 6.737], dtype=float32), 1571, [])
(array([1.604, 4.671], dtype=float32), 1574, [])
(array([-3.753,  3.569], dtype=float32), 1297, [])
(array([-2.894, -0.77 ], dtype=float32), 1218, [])
(array([5.317, 6.892], dtype=float32), 1286, [])
(array([-2.217,  2.972], dtype=float32), 1547, [])
(array([2.365, 4.198], dtype=float32), 1439, [])
(array([4.894, 5.833], dtype=float32), 1361, [])
(array([-1.637,  4.246], dtype=float32), 1509, [])
(array([-2.026,  6.121], dtype=float32), 1527, [])
(array([1.28 , 2.466], dtype=float32), 1515, [])
(array([-3.711, -0.572], dtype=float32), 1426, [])
(array([-3.654,  2.427], dtype=float32), 1499, [])
(array([5.775, 5.657], dtype=float32), 1256, [])
(array([-1.875,  3.378], dtype=float32), 1172, [])
(array([4.594, 6.692], dtype=float32), 1598, [])
(array([ 1.55 , -0.747], dtype=float32), 1477, [])
(array([4.305, 3.885], dtype=float32), 1429, [])
(array([5.651, 4.481], dtype=float32), 1428, [])
(array([ 2.066, -0.778], dtype=float32), 1207, [])
(array([5.576, 4.163], dtype=float32), 1284, [])
(array([4.451, 6.484], dtype=float32), 1420, [])
(array([5.892, 5.461], dtype=float32), 1537, [])
(array([-3.698, -0.744], dtype=float32), 1239, [])
(array([5.839, 4.631], dtype=float32), 1367, [])
(array([-1.355,  6.73 ], dtype=float32), 1182, [])
(array([ 1.429, -0.96 ], dtype=float32), 1530, [])
(array([4.493, 6.707], dtype=float32), 1127, [])
(array([5.974, 6.807], dtype=float32), 1312, [])
(array([5.987, 6.693], dtype=float32), 1516, [])
(array([ 5.734, -0.983], dtype=float32), 1245, [])


         21287160 function calls (21281624 primitive calls) in 28.519 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  2624400   13.740    0.000   25.461    0.000 linalg.py:2203(norm)
  2624400    4.793    0.000    4.793    0.000 {built-in method numpy.core.multiarray.dot}
  2624400    3.335    0.000    3.335    0.000 {method 'ravel' of 'numpy.ndarray' objects}
     1620    2.091    0.001    2.091    0.001 {built-in method builtins.sorted}
  2627716    1.188    0.000    1.188    0.000 {built-in method numpy.core.multiarray.array}
  2626020    0.816    0.000    2.000    0.000 numeric.py:433(asarray)
  2624400    0.811    0.000    1.130    0.000 linalg.py:113(isComplexType)
  5256958    0.786    0.000    0.786    0.000 {built-in method builtins.issubclass}
     1620    0.374    0.000    0.374    0.000 main.py:27(<listcomp>)
      146    0.084    0.001    2.618    0.018 {method 'sort' of 'list' objects}
     1620    0.062    0.000    0.138    0.000 arrayprint.py:839(fillFormat)
     1620    0.037    0.000    0.037    0.000 main.py:17(volume)
        2    0.036    0.018   36.080   18.040 main.py:1(<module>)
     1620    0.029    0.000    2.534    0.002 main.py:26(d_k)
     6460    0.019    0.000    0.019    0.000 {built-in method numpy.core.multiarray.dragon4_positional}
4860/1620    0.018    0.000    0.053    0.000 arrayprint.py:694(recurser)
     3240    0.017    0.000    0.027    0.000 arrayprint.py:923(__call__)
     3240    0.016    0.000    0.016    0.000 {method 'reduce' of 'numpy.ufunc' objects}
      125    0.013    0.000    0.013    0.000 {built-in method marshal.loads}
        1    0.010    0.010   33.029   33.029 main.py:81(<listcomp>)
     1620    0.009    0.000    0.228    0.000 arrayprint.py:470(_array2string)
     1620    0.009    0.000    0.269    0.000 arrayprint.py:1371(array_repr)
    24/23    0.008    0.000    0.010    0.000 {built-in method _imp.create_dynamic}
     1620    0.008    0.000    0.148    0.000 arrayprint.py:812(__init__)
     1626    0.008    0.000    0.277    0.000 {built-in method builtins.print}
     4519    0.007    0.000    0.010    0.000 main.py:45(add_point)
     3246    0.007    0.000    0.017    0.000 numeric.py:2491(seterr)
     3240    0.007    0.000    0.023    0.000 fromnumeric.py:64(_wrapreduction)
     4845    0.006    0.000    0.015    0.000 arrayprint.py:889(<genexpr>)
     1620    0.006    0.000    0.162    0.000 arrayprint.py:401(_get_format_function)
     3246    0.006    0.000    0.006    0.000 numeric.py:2592(geterr)
     1620    0.006    0.000    0.251    0.000 arrayprint.py:499(array2string)
     9248    0.006    0.000    0.008    0.000 {built-in method builtins.max}
        1    0.005    0.005    0.005    0.005 main.py:82(<listcomp>)
48007/47934    0.005    0.000    0.005    0.000 {built-in method builtins.len}
  310/308    0.005    0.000    0.008    0.000 {built-in method builtins.__build_class__}
     1620    0.005    0.000    0.235    0.000 arrayprint.py:453(wrapper)
        1    0.005    0.005    0.005    0.005 {method 'dot' of 'numpy.ndarray' objects}
     3240    0.004    0.000    0.005    0.000 arrayprint.py:671(_extendLine)
     1620    0.004    0.000    0.008    0.000 arrayprint.py:67(_make_options_dict)
     1620    0.004    0.000    0.004    0.000 arrayprint.py:348(_get_formatdict)
     1621    0.004    0.000    0.004    0.000 {built-in method builtins.input}
     4845    0.003    0.000    0.020    0.000 arrayprint.py:894(<genexpr>)
     1620    0.003    0.000    0.004    0.000 arrayprint.py:1347(dtype_short_repr)
     1620    0.003    0.000    0.151    0.000 arrayprint.py:357(<lambda>)
      649    0.003    0.000    0.003    0.000 {built-in method posix.stat}
     3247    0.003    0.000    0.003    0.000 {built-in method numpy.core.umath.seterrobj}
      303    0.003    0.000    0.010    0.000 <frozen importlib._bootstrap_external>:1356(find_spec)
    17756    0.002    0.000    0.002    0.000 {method 'append' of 'list' objects}
     1620    0.002    0.000    0.002    0.000 arrayprint.py:1311(dtype_is_implied)
     1620    0.002    0.000    0.055    0.000 arrayprint.py:685(_formatArray)
     4869    0.002    0.000    0.002    0.000 {method 'split' of 'str' objects}
     1620    0.002    0.000    0.002    0.000 {built-in method builtins.locals}
     1620    0.002    0.000    0.016    0.000 fromnumeric.py:2227(amax)
     1623    0.002    0.000    0.009    0.000 numeric.py:2896(__exit__)
     1620    0.002    0.000    0.011    0.000 fromnumeric.py:2337(amin)
     1623    0.002    0.000    0.011    0.000 numeric.py:2891(__enter__)
     1620    0.002    0.000    0.002    0.000 arrayprint.py:72(<dictcomp>)
     1826    0.002    0.000    0.002    0.000 {method 'format' of 'str' objects}
     4675    0.002    0.000    0.002    0.000 {built-in method builtins.min}
      127    0.002    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:914(get_data)
     1623    0.002    0.000    0.002    0.000 numeric.py:2887(__init__)
      127    0.001    0.000    0.001    0.000 {method 'read' of '_io.FileIO' objects}
     6494    0.001    0.000    0.001    0.000 {built-in method numpy.core.umath.geterrobj}
     1621    0.001    0.000    0.001    0.000 {method 'rfind' of 'str' objects}
     1562    0.001    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:56(_path_join)
     2491    0.001    0.000    0.001    0.000 {built-in method builtins.hasattr}
     4845    0.001    0.000    0.002    0.000 arrayprint.py:898(<genexpr>)
      126    0.001    0.000    0.021    0.000 <frozen importlib._bootstrap_external>:793(get_code)
      162    0.001    0.000    0.015    0.000 <frozen importlib._bootstrap>:882(_find_spec)
     1562    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:58(<listcomp>)
      141    0.001    0.000    0.007    0.000 main.py:56(union_clusters)
     3285    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}
        9    0.001    0.000    0.002    0.000 __init__.py:316(namedtuple)
     5238    0.001    0.000    0.001    0.000 {built-in method builtins.isinstance}
     4998    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
      141    0.001    0.000    0.001    0.000 main.py:106(<listcomp>)
      358    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:1203(_path_importer_cache)
      361    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)
     1672    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}
     4845    0.001    0.000    0.001    0.000 arrayprint.py:899(<genexpr>)
    38/17    0.001    0.000    0.002    0.000 sre_parse.py:475(_parse)
    136/1    0.001    0.000   36.076   36.076 {built-in method builtins.exec}
     1766    0.001    0.000    0.001    0.000 {built-in method builtins.getattr}
      361    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:78(acquire)
      252    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:271(cache_from_source)
     6622    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
     4886    0.001    0.000    0.001    0.000 {method 'items' of 'dict' objects}
    167/1    0.001    0.000    0.089    0.089 <frozen importlib._bootstrap>:978(_find_and_load)
     1620    0.001    0.000    0.001    0.000 {built-in method math.factorial}
   785/32    0.001    0.000    0.081    0.003 <frozen importlib._bootstrap>:1009(_handle_fromlist)
      157    0.001    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:1240(_get_spec)
    155/1    0.001    0.000    0.089    0.089 <frozen importlib._bootstrap>:663(_load_unlocked)
     1620    0.001    0.000    0.001    0.000 {method 'discard' of 'set' objects}
       31    0.001    0.000    0.001    0.000 sre_compile.py:276(_optimize_charset)
      361    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:103(release)
      155    0.001    0.000    0.003    0.000 <frozen importlib._bootstrap>:504(_init_module_attrs)
     2001    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
    167/1    0.001    0.000    0.089    0.089 <frozen importlib._bootstrap>:948(_find_and_load_unlocked)
     1682    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:222(_verbose_message)
      282    0.001    0.000    0.002    0.000 function_base.py:3895(add_newdoc)
       17    0.000    0.000    0.000    0.000 {built-in method posix.listdir}
     1620    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
     2343    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}
    68/17    0.000    0.000    0.002    0.000 sre_compile.py:71(_compile)
      155    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:318(__exit__)
     2023    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
     1620    0.000    0.000    0.000    0.000 arrayprint.py:803(_none_or_positive_arg)
        6    0.000    0.000    0.122    0.020 __init__.py:1(<module>)
     1620    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      150    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:574(spec_from_file_location)
     1297    0.000    0.000    0.000    0.000 {method 'rpartition' of 'str' objects}
       77    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x56432bb5e320}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.compile}
      698    0.000    0.000    0.000    0.000 sre_parse.py:233(__next)
        3    0.000    0.000    0.001    0.000 enum.py:134(__new__)
    126/1    0.000    0.000    0.089    0.089 <frozen importlib._bootstrap_external>:722(exec_module)
    327/7    0.000    0.000    0.081    0.012 {built-in method builtins.__import__}
      125    0.000    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:523(_compile_bytecode)
     1620    0.000    0.000    0.000    0.000 {method 'isalpha' of 'str' objects}
      649    0.000    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:74(_path_stat)
      126    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:438(_classify_pyc)
  155/153    0.000    0.000    0.014    0.000 <frozen importlib._bootstrap>:576(module_from_spec)
        1    0.000    0.000    0.002    0.002 numerictypes.py:81(<module>)
     1621    0.000    0.000    0.000    0.000 {built-in method builtins.id}
        1    0.000    0.000    0.003    0.003 core.py:21(<module>)
      150    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1351(_get_spec)
      125    0.000    0.000    0.006    0.000 re.py:271(_compile)
      342    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:416(parent)
      150    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:369(_get_cached)
      125    0.000    0.000    0.000    0.000 {built-in method _imp._fix_co_filename}
      164    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:176(cb)
      276    0.000    0.000    0.002    0.000 <frozen importlib._bootstrap>:403(cached)
    79/28    0.000    0.000    0.000    0.000 sre_parse.py:174(getwidth)
      219    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:84(_path_is_mode_type)
      462    0.000    0.000    0.000    0.000 sre_parse.py:164(__getitem__)
      164    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:58(__init__)
      253    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:62(_path_split)
        1    0.000    0.000    0.001    0.001 getlimits.py:3(<module>)
       17    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1190(_path_hooks)
      165    0.000    0.000    0.000    0.000 {built-in method builtins.any}
      194    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:194(_lock_unlock_module)
     1001    0.000    0.000    0.000    0.000 {built-in method _imp.acquire_lock}
     1001    0.000    0.000    0.000    0.000 {built-in method _imp.release_lock}
      277    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      377    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:51(_r_long)
       55    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}
      555    0.000    0.000    0.000    0.000 sre_parse.py:254(get)
      476    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:859(__exit__)
      143    0.000    0.000    0.000    0.000 main.py:35(__init__)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:471(_validate_timestamp_pyc)
      167    0.000    0.000    0.002    0.000 <frozen importlib._bootstrap>:147(__enter__)
      157    0.000    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:1272(find_spec)
        1    0.000    0.000    0.004    0.004 numeric.py:1(<module>)
       53    0.000    0.000    0.000    0.000 core.py:890(__init__)
        1    0.000    0.000    0.001    0.001 parse.py:28(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:259(_reset_cache)
       39    0.000    0.000    0.000    0.000 _inspect.py:142(formatargspec)
      476    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:855(__enter__)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:401(_check_name_wrapper)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:35(_new_module)
    230/1    0.000    0.000    0.088    0.088 <frozen importlib._bootstrap>:211(_call_with_frames_removed)
        1    0.000    0.000    0.088    0.088 __init__.py:106(<module>)
      162    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:369(__init__)
       26    0.000    0.000    0.000    0.000 sre_parse.py:408(_uniq)
      377    0.000    0.000    0.000    0.000 {built-in method from_bytes}
        6    0.000    0.000    0.000    0.000 getlimits.py:65(__init__)
      155    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:311(__enter__)
        1    0.000    0.000    0.008    0.008 utils.py:4(<module>)
        5    0.000    0.000    0.000    0.000 {built-in method _imp.create_builtin}
       39    0.000    0.000    0.000    0.000 _inspect.py:67(getargs)
        1    0.000    0.000    0.002    0.002 tokenize.py:21(<module>)
      201    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:93(_path_isfile)
       17    0.000    0.000    0.005    0.000 sre_compile.py:759(compile)
      126    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:951(path_stats)
      405    0.000    0.000    0.000    0.000 {built-in method posix.fspath}
      252    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
       13    0.000    0.000    0.000    0.000 {built-in method _abc._abc_init}
       88    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      277    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.add_docstring}
    34/17    0.000    0.000    0.003    0.000 sre_parse.py:417(_parse_sub)
       46    0.000    0.000    0.000    0.000 enum.py:69(__setitem__)
      167    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:151(__exit__)
      175    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
       61    0.000    0.000    0.000    0.000 enum.py:375(__setattr__)
       17    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1319(__init__)
       17    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1404(_fill_cache)
        4    0.000    0.000    0.000    0.000 numeric.py:2916(extend_all)
      620    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:321(<genexpr>)
        1    0.000    0.000    0.067    0.067 add_newdocs.py:10(<module>)
       23    0.000    0.000    0.000    0.000 functools.py:37(update_wrapper)
        1    0.000    0.000    0.000    0.000 case.py:351(TestCase)
       51    0.000    0.000    0.000    0.000 _internal.py:715(_ufunc_doc_signature_formatter)
      333    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}
       17    0.000    0.000    0.000    0.000 sre_compile.py:536(_compile_info)
      157    0.000    0.000    0.000    0.000 {built-in method _imp.is_frozen}
      167    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:143(__init__)
       17    0.000    0.000    0.003    0.000 sre_parse.py:919(parse)
    23/10    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}
      155    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:307(__init__)
       26    0.000    0.000    0.000    0.000 numerictypes.py:229(bitname)
        1    0.000    0.000    0.000    0.000 numerictypes.py:299(_add_aliases)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:884(__init__)
        9    0.000    0.000    0.000    0.000 datetime.py:473(__new__)
    24/23    0.000    0.000    0.010    0.000 <frozen importlib._bootstrap_external>:1040(create_module)
      180    0.000    0.000    0.000    0.000 sre_parse.py:172(append)
      392    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.003    0.003 random.py:38(<module>)
      157    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:792(find_spec)
       17    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1445(path_hook_for_FileFinder)
        4    0.000    0.000    0.000    0.000 {method 'split' of 're.Pattern' objects}
      101    0.000    0.000    0.000    0.000 _inspect.py:133(strseq)
      162    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:719(find_spec)
        2    0.000    0.000    0.001    0.000 function_base.py:1(<module>)
        3    0.000    0.000    0.000    0.000 tokenize.py:132(_all_string_prefixes)
        1    0.000    0.000    0.000    0.000 numerictypes.py:766(_construct_lookups)
      206    0.000    0.000    0.000    0.000 sre_parse.py:249(match)
       11    0.000    0.000    0.000    0.000 sre_compile.py:413(<listcomp>)
       60    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}
        1    0.000    0.000    0.003    0.003 __init__.py:24(<module>)
       20    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.dragon4_scientific}
        3    0.000    0.000    0.000    0.000 enum.py:176(<setcomp>)
        1    0.000    0.000    0.001    0.001 datetime.py:5(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:758(__init__)
       22    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.empty}
        1    0.000    0.000    0.000    0.000 _compat_pickle.py:9(<module>)
       44    0.000    0.000    0.000    0.000 _inspect.py:98(getargspec)
       31    0.000    0.000    0.000    0.000 sre_compile.py:249(_compile_charset)
        1    0.000    0.000    0.005    0.005 __init__.py:41(<module>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:5(<module>)
       71    0.000    0.000    0.000    0.000 {built-in method builtins.repr}
       26    0.000    0.000    0.001    0.000 core.py:6558(getdoc)
       17    0.000    0.000    0.000    0.000 enum.py:815(__and__)
       39    0.000    0.000    0.001    0.000 enum.py:283(__call__)
        2    0.000    0.000    0.016    0.008 __init__.py:45(<module>)
       11    0.000    0.000    0.000    0.000 sre_compile.py:411(_mk_bitmap)
        1    0.000    0.000    0.005    0.005 __init__.py:206(_sanity_check)
      102    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 core.py:6241(MaskedConstant)
       23    0.000    0.000    0.000    0.000 numerictypes.py:216(_evalname)
        1    0.000    0.000    0.000    0.000 core.py:2707(MaskedArray)
        1    0.000    0.000    0.004    0.004 pathlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 extras.py:10(<module>)
      256    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       44    0.000    0.000    0.001    0.000 core.py:149(get_object_signature)
        1    0.000    0.000    0.000    0.000 argparse.py:1165(FileType)
       17    0.000    0.000    0.000    0.000 sre_parse.py:224(__init__)
      111    0.000    0.000    0.000    0.000 sre_parse.py:286(tell)
       24    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1048(exec_module)
        1    0.000    0.000    0.003    0.003 shutil.py:5(<module>)
       30    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 enum.py:633(<listcomp>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:285(_add_types)
        1    0.000    0.000    0.013    0.013 _internal.py:6(<module>)
       17    0.000    0.000    0.002    0.000 sre_compile.py:598(_code)
      303    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:40(_relax_case)
        2    0.000    0.000    0.000    0.000 {built-in method _ctypes.POINTER}
       17    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
        1    0.000    0.000    0.002    0.002 pickle.py:24(<module>)
        1    0.000    0.000    0.000    0.000 _endian.py:1(<module>)
       36    0.000    0.000    0.000    0.000 getlimits.py:69(<lambda>)
      113    0.000    0.000    0.000    0.000 {method 'find' of 'bytearray' objects}
       14    0.000    0.000    0.000    0.000 __init__.py:139(_check_size)
       72    0.000    0.000    0.000    0.000 sre_parse.py:111(__init__)
        3    0.000    0.000    0.001    0.000 enum.py:388(_create_)
       27    0.000    0.000    0.000    0.000 core.py:917(__init__)
        1    0.000    0.000    0.005    0.005 index_tricks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:1(<module>)
      155    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:424(has_location)
        1    0.000    0.000    0.001    0.001 __init__.py:88(<module>)
        2    0.000    0.000    0.000    0.000 shape_base.py:1(<module>)
        1    0.000    0.000    0.001    0.001 signal.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:73(CFUNCTYPE)
      144    0.000    0.000    0.000    0.000 sre_parse.py:160(__len__)
        8    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      103    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
        1    0.000    0.000    0.000    0.000 ctypeslib.py:332(<dictcomp>)
        1    0.000    0.000    0.000    0.000 pickle.py:181(<listcomp>)
       32    0.000    0.000    0.000    0.000 sre_compile.py:423(_simple)
        8    0.000    0.000    0.000    0.000 core.py:8046(__init__)
       73    0.000    0.000    0.000    0.000 signal.py:10(<lambda>)
        7    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}
      102    0.000    0.000    0.000    0.000 re.py:170(match)
       36    0.000    0.000    0.000    0.000 enum.py:525(__new__)
        1    0.000    0.000    0.001    0.001 npyio.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ntpath.py:6(<module>)
        1    0.000    0.000    0.002    0.002 hashlib.py:54(<module>)
        1    0.000    0.000    0.005    0.005 case.py:1(<module>)
       30    0.000    0.000    0.000    0.000 getlimits.py:26(_fr1)
      368    0.000    0.000    0.000    0.000 {built-in method builtins.globals}
        1    0.000    0.000    0.000    0.000 ast.py:26(<module>)
        1    0.000    0.000    0.000    0.000 defchararray.py:17(<module>)
    16/14    0.000    0.000    0.000    0.000 sre_compile.py:461(_get_literal_prefix)
        1    0.000    0.000    0.024    0.024 __init__.py:7(<module>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:120(<listcomp>)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:51(<module>)
        1    0.000    0.000    0.001    0.001 linalg.py:10(<module>)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:3(<module>)
        1    0.000    0.000    0.000    0.000 pickle.py:1021(_Unpickler)
        1    0.000    0.000    0.000    0.000 hermite.py:59(<module>)
       14    0.000    0.000    0.001    0.000 hashlib.py:116(__get_openssl_constructor)
        1    0.000    0.000    0.000    0.000 scimath.py:17(<module>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:340(_add_integer_aliases)
        1    0.000    0.000    0.000    0.000 numerictypes.py:440(_set_array_types)
       13    0.000    0.000    0.000    0.000 abc.py:125(__new__)
       61    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}
       18    0.000    0.000    0.000    0.000 core.py:993(__init__)
        1    0.000    0.000    0.000    0.000 chebyshev.py:88(<module>)
        1    0.000    0.000    0.003    0.003 __init__.py:15(<module>)
        1    0.000    0.000    0.000    0.000 token.py:78(<dictcomp>)
       30    0.000    0.000    0.000    0.000 getlimits.py:70(<lambda>)
       30    0.000    0.000    0.000    0.000 numerictypes.py:432(_add_array_type)
       91    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_iscased}
        2    0.000    0.000    0.000    0.000 core.py:2928(__array_finalize__)
        2    0.000    0.000    0.000    0.000 {function Random.seed at 0x7f5b39b2a048}
        1    0.000    0.000    0.001    0.001 bz2.py:5(<module>)
       15    0.000    0.000    0.000    0.000 arrayprint.py:864(<genexpr>)
        5    0.000    0.000    0.000    0.000 getlimits.py:507(__init__)
       56    0.000    0.000    0.000    0.000 sre_parse.py:81(groups)
      189    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.052    0.052 type_check.py:3(<module>)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:909(get_filename)
       24    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1029(__init__)
       18    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}
        1    0.000    0.000    0.000    0.000 mixins.py:63(NDArrayOperatorsMixin)
        1    0.000    0.000    0.001    0.001 utils.py:1(<module>)
        1    0.000    0.000    0.005    0.005 __init__.py:10(<module>)
        4    0.000    0.000    0.000    0.000 textwrap.py:414(dedent)
       18    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:98(_path_isdir)
        1    0.000    0.000    0.000    0.000 _polybase.py:19(ABCPolyBase)
        8    0.000    0.000    0.000    0.000 contextlib.py:210(contextmanager)
      136    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1325(<genexpr>)
       10    0.000    0.000    0.000    0.000 {built-in method _abc._abc_register}
        1    0.000    0.000    0.000    0.000 polynomial.py:4(<module>)
        1    0.000    0.000    0.004    0.004 tempfile.py:24(<module>)
        1    0.000    0.000    0.000    0.000 argparse.py:62(<module>)
       78    0.000    0.000    0.000    0.000 _internal.py:726(<genexpr>)
       62    0.000    0.000    0.000    0.000 _inspect.py:146(<lambda>)
        1    0.000    0.000    0.000    0.000 pathlib.py:109(_WindowsFlavour)
        1    0.000    0.000    0.000    0.000 pathlib.py:595(PurePath)
       17    0.000    0.000    0.000    0.000 sre_parse.py:76(__init__)
        8    0.000    0.000    0.000    0.000 sre_parse.py:267(getuntil)
       17    0.000    0.000    0.000    0.000 sre_parse.py:343(_escape)
       17    0.000    0.000    0.000    0.000 sre_parse.py:903(fix_flags)
       46    0.000    0.000    0.000    0.000 enum.py:26(_is_dunder)
        3    0.000    0.000    0.001    0.000 enum.py:612(_convert)
       17    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
       49    0.000    0.000    0.000    0.000 {method 'isidentifier' of 'str' objects}
        1    0.000    0.000    0.000    0.000 legendre.py:83(<module>)
        1    0.000    0.000    0.000    0.000 hermite_e.py:59(<module>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:369(_set_up_aliases)
        1    0.000    0.000    0.001    0.001 decimal.py:2(<module>)
       11    0.000    0.000    0.000    0.000 sre_compile.py:492(_get_charset_prefix)
       10    0.000    0.000    0.000    0.000 extras.py:242(getdoc)
        1    0.000    0.000    0.000    0.000 laguerre.py:59(<module>)
        1    0.000    0.000    0.001    0.001 polynomial.py:56(<module>)
        1    0.000    0.000    0.000    0.000 lzma.py:9(<module>)
        1    0.000    0.000    0.000    0.000 pprint.py:98(PrettyPrinter)
       62    0.000    0.000    0.000    0.000 numerictypes.py:127(english_lower)
       21    0.000    0.000    0.000    0.000 functools.py:67(wraps)
       41    0.000    0.000    0.000    0.000 __init__.py:388(<genexpr>)
        4    0.000    0.000    0.001    0.000 warnings.py:119(filterwarnings)
        4    0.000    0.000    0.000    0.000 {method 'findall' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 {built-in method posix.open}
       26    0.000    0.000    0.001    0.000 core.py:6553(__init__)
        1    0.000    0.000    0.005    0.005 py3k.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _iotools.py:493(StringConverter)
       34    0.000    0.000    0.000    0.000 sre_compile.py:595(isstring)
        5    0.000    0.000    0.000    0.000 warnings.py:170(_add_filter)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.dir}
        1    0.000    0.000    0.001    0.001 loader.py:1(<module>)
       15    0.000    0.000    0.000    0.000 arrayprint.py:867(<genexpr>)
       46    0.000    0.000    0.000    0.000 enum.py:34(_is_sunder)
        9    0.000    0.000    0.000    0.000 enum.py:452(_find_data_type)
        7    0.000    0.000    0.000    0.000 codecs.py:319(decode)
       54    0.000    0.000    0.000    0.000 abc.py:7(abstractmethod)
        1    0.000    0.000    0.000    0.000 core.py:6251(__new__)
        1    0.000    0.000    0.000    0.000 fftpack.py:32(<module>)
        1    0.000    0.000    0.000    0.000 records.py:36(<module>)
        1    0.000    0.000    0.000    0.000 numeric.py:2923(<listcomp>)
       44    0.000    0.000    0.000    0.000 _inspect.py:15(ismethod)
       11    0.000    0.000    0.000    0.000 sre_parse.py:84(opengroup)
       10    0.000    0.000    0.000    0.000 __future__.py:81(__init__)
        3    0.000    0.000    0.000    0.000 enum.py:473(_find_new_)
       21    0.000    0.000    0.000    0.000 types.py:164(__get__)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:433(spec_from_loader)
        1    0.000    0.000    0.000    0.000 {built-in method marshal.dumps}
        2    0.000    0.000    0.000    0.000 {method 'tolist' of 'memoryview' objects}
        4    0.000    0.000    0.000    0.000 core.py:126(doc_note)
        1    0.000    0.000    0.000    0.000 twodim_base.py:3(<module>)
        2    0.000    0.000    0.000    0.000 random.py:97(seed)
        3    0.000    0.000    0.000    0.000 utils.py:74(__call__)
        1    0.000    0.000    0.002    0.002 runner.py:1(<module>)
        1    0.000    0.000    0.002    0.002 signals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 difflib.py:27(<module>)
       24    0.000    0.000    0.000    0.000 tokenize.py:143(<listcomp>)
        1    0.000    0.000    0.000    0.000 _iotools.py:3(<module>)
       15    0.000    0.000    0.005    0.000 re.py:232(compile)
       71    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_tolower}
       11    0.000    0.000    0.000    0.000 {method 'translate' of 'bytearray' objects}
        2    0.000    0.000    0.000    0.000 core.py:2902(_update_from)
        1    0.000    0.000    0.000    0.000 pprint.py:35(<module>)
       20    0.000    0.000    0.000    0.000 tokenize.py:107(group)
        1    0.000    0.000    0.000    0.000 _methods.py:5(<module>)
       44    0.000    0.000    0.000    0.000 _inspect.py:28(isfunction)
        1    0.000    0.000    0.000    0.000 pathlib.py:977(Path)
       34    0.000    0.000    0.000    0.000 sre_parse.py:168(__setitem__)
       40    0.000    0.000    0.000    0.000 enum.py:18(_is_descriptor)
       12    0.000    0.000    0.000    0.000 mixins.py:48(_numeric_methods)
        1    0.000    0.000    0.000    0.000 defmatrix.py:70(matrix)
        1    0.000    0.000    0.000    0.000 einsumfunc.py:4(<module>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:418(_construct_char_code_lookup)
        1    0.000    0.000    0.000    0.000 format.py:156(<module>)
        1    0.000    0.000    0.001    0.001 _distributor_init.py:10(<module>)
        1    0.000    0.000    0.000    0.000 _numpy_fft.py:54(<module>)
        1    0.000    0.000    0.003    0.003 traceback.py:1(<module>)
        1    0.000    0.000    0.000    0.000 result.py:24(TestResult)
        1    0.000    0.000    0.000    0.000 numbers.py:32(Complex)
        1    0.000    0.000    0.000    0.000 abc.py:1(<module>)
       39    0.000    0.000    0.000    0.000 _inspect.py:43(iscode)
        1    0.000    0.000    0.000    0.000 _datasource.py:35(<module>)
        1    0.000    0.000    0.000    0.000 enum.py:869(<listcomp>)
        2    0.000    0.000    0.000    0.000 sre_compile.py:416(_bytes_to_codes)
        9    0.000    0.000    0.000    0.000 enum.py:441(_get_mixins_)
      126    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:719(create_module)
        8    0.000    0.000    0.000    0.000 core.py:2548(_arraymethod)
        1    0.000    0.000    0.000    0.000 core.py:2772(__new__)
        1    0.000    0.000    0.000    0.000 helper.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _polybase.py:8(<module>)
        1    0.000    0.000    0.003    0.003 defmatrix.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decorators.py:15(<module>)
        1    0.000    0.000    0.000    0.000 nosetester.py:6(<module>)
        8    0.000    0.000    0.001    0.000 hashlib.py:73(__get_builtin_constructor)
        1    0.000    0.000    0.000    0.000 suite.py:1(<module>)
        1    0.000    0.000    0.000    0.000 main.py:55(TestProgram)
        1    0.000    0.000    0.001    0.001 string.py:65(__init__)
        1    0.000    0.000    0.003    0.003 result.py:1(<module>)
        1    0.000    0.000    0.000    0.000 defchararray.py:1669(chararray)
        1    0.000    0.000    0.000    0.000 {built-in method _ctypes.dlopen}
       40    0.000    0.000    0.000    0.000 numerictypes.py:154(english_upper)
        1    0.000    0.000    0.000    0.000 numbers.py:6(<module>)
       14    0.000    0.000    0.000    0.000 __init__.py:25(register_func)
        1    0.000    0.000    0.000    0.000 datetime.py:1489(datetime)
       27    0.000    0.000    0.000    0.000 sre_compile.py:453(_get_iscased)
       16    0.000    0.000    0.000    0.000 sre_compile.py:65(_combine_flags)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:232(_requires_builtin_wrapper)
       23    0.000    0.000    0.000    0.000 {built-in method sys._getframe}
        8    0.000    0.000    0.000    0.000 core.py:8051(getdoc)
        6    0.000    0.000    0.000    0.000 core.py:1142(__init__)
        1    0.000    0.000    0.000    0.000 polynomial.py:934(poly1d)
        1    0.000    0.000    0.000    0.000 threading.py:739(Thread)
        1    0.000    0.000    0.000    0.000 util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pickle.py:372(_Pickler)
        1    0.000    0.000    0.000    0.000 numerictypes.py:942(_register_types)
        5    0.000    0.000    0.000    0.000 datetime.py:396(_check_date_fields)
        3    0.000    0.000    0.000    0.000 datetime.py:1497(__new__)
        1    0.000    0.000    0.000    0.000 enum.py:851(_decompose)
        3    0.000    0.000    0.000    0.000 enum.py:124(__prepare__)
        2    0.000    0.000    0.000    0.000 os.py:687(__delitem__)
        9    0.000    0.000    0.000    0.000 os.py:751(encode)
        7    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
        1    0.000    0.000    0.000    0.000 nanfunctions.py:22(<module>)
        1    0.000    0.000    0.000    0.000 histograms.py:3(<module>)
        1    0.000    0.000    0.003    0.003 __init__.py:3(<module>)
        1    0.000    0.000    0.000    0.000 linalg.py:74(_determine_error_states)
        1    0.000    0.000    0.000    0.000 random.py:72(Random)
        3    0.000    0.000    0.000    0.000 utils.py:118(deprecate)
       74    0.000    0.000    0.000    0.000 signal.py:17(<lambda>)
       75    0.000    0.000    0.000    0.000 signal.py:22(<lambda>)
        1    0.000    0.000    0.001    0.001 string.py:15(<module>)
        1    0.000    0.000    0.000    0.000 token.py:1(<module>)
        1    0.000    0.000    0.000    0.000 case.py:398(__init__)
        1    0.000    0.000    0.000    0.000 memmap.py:1(<module>)
       85    0.000    0.000    0.000    0.000 _compat_pickle.py:167(<genexpr>)
       38    0.000    0.000    0.000    0.000 {built-in method _ctypes.sizeof}
       14    0.000    0.000    0.000    0.000 numerictypes.py:181(english_capitalize)
        1    0.000    0.000    0.000    0.000 _import_tools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datetime.py:774(date)
        1    0.000    0.000    0.000    0.000 datetime.py:2106(timezone)
       10    0.000    0.000    0.000    0.000 abc.py:130(register)
       45    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
        9    0.000    0.000    0.000    0.000 {built-in method builtins.round}
       10    0.000    0.000    0.000    0.000 extras.py:238(__init__)
       10    0.000    0.000    0.000    0.000 pytesttester.py:69(__init__)
        1    0.000    0.000    0.000    0.000 ufunclike.py:5(<module>)
        1    0.000    0.000    0.000    0.000 tempfile.py:627(SpooledTemporaryFile)
        1    0.000    0.000    0.000    0.000 bisect.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:481(PYFUNCTYPE)
        1    0.000    0.000    0.000    0.000 struct.py:3(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.copyto}
        1    0.000    0.000    0.001    0.001 financial.py:12(<module>)
        1    0.000    0.000    0.000    0.000 arraypad.py:5(<module>)
        1    0.000    0.000    0.000    0.000 _globals.py:17(<module>)
        5    0.000    0.000    0.000    0.000 datetime.py:409(_check_time_fields)
       11    0.000    0.000    0.000    0.000 sre_parse.py:96(closegroup)
        1    0.000    0.000    0.000    0.000 __future__.py:48(<module>)
        3    0.000    0.000    0.000    0.000 enum.py:151(<dictcomp>)
       10    0.000    0.000    0.000    0.000 enum.py:607(value)
        1    0.000    0.000    0.000    0.000 weakref.py:102(__init__)
        3    0.000    0.000    0.000    0.000 os.py:673(__getitem__)
    23/10    0.000    0.000    0.000    0.000 abc.py:141(__subclasscheck__)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:536(_code_to_timestamp_pyc)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:740(create_module)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:105(_write_atomic)
        2    0.000    0.000    0.000    0.000 {built-in method posix.putenv}
       24    0.000    0.000    0.000    0.000 {built-in method _imp.exec_dynamic}
       73    0.000    0.000    0.000    0.000 {method 'isupper' of 'str' objects}
       41    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}
        1    0.000    0.000    0.000    0.000 polyutils.py:45(<module>)
       19    0.000    0.000    0.000    0.000 mixins.py:20(_binary_method)
        1    0.000    0.000    0.000    0.000 threading.py:1166(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1684(LoggerAdapter)
        1    0.000    0.000    0.000    0.000 threading.py:216(__init__)
        1    0.000    0.000    0.002    0.002 linecache.py:6(<module>)
        2    0.000    0.000    0.000    0.000 getlimits.py:532(max)
       43    0.000    0.000    0.000    0.000 _compat_pickle.py:165(<genexpr>)
        1    0.000    0.000    0.000    0.000 numbers.py:147(Real)
        1    0.000    0.000    0.000    0.000 fnmatch.py:11(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:381(_NormalAccessor)
        1    0.000    0.000    0.000    0.000 __config__.py:3(<module>)
       35    0.000    0.000    0.000    0.000 datetime.py:379(_check_int_field)
        1    0.000    0.000    0.000    0.000 datetime.py:454(timedelta)
        1    0.000    0.000    0.000    0.000 datetime.py:1152(time)
        3    0.000    0.000    0.000    0.000 sre_parse.py:843(_parse_flags)
        2    0.000    0.000    0.000    0.000 _weakrefset.py:36(__init__)
        2    0.000    0.000    0.000    0.000 os.py:681(__setitem__)
       40    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
        4    0.000    0.000    0.000    0.000 {built-in method posix.register_at_fork}
       36    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 core.py:3075(view)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1811(HermiteE)
       13    0.000    0.000    0.000    0.000 mixins.py:30(_reflected_binary_method)
        1    0.000    0.000    0.000    0.000 mixins.py:1(<module>)
        3    0.000    0.000    0.000    0.000 ufunclike.py:14(_deprecate_out_named_y)
        1    0.000    0.000    0.000    0.000 utils.py:1923(suppress_warnings)
        1    0.000    0.000    0.000    0.000 argparse.py:1600(ArgumentParser)
        1    0.000    0.000    0.000    0.000 __init__.py:804(Handler)
       10    0.000    0.000    0.000    0.000 case.py:1333(_deprecate)
        3    0.000    0.000    0.000    0.000 __init__.py:482(CFunctionType)
        1    0.000    0.000    0.000    0.000 parse.py:142(_NetlocResultMixinBase)
        1    0.000    0.000    0.000    0.000 __init__.py:332(__init__)
        1    0.000    0.000    0.000    0.000 _internal.py:246(_ctypes)
        1    0.000    0.000    0.000    0.000 _inspect.py:7(<module>)
        1    0.000    0.000    0.000    0.000 arrayterator.py:9(<module>)
        1    0.000    0.000    0.000    0.000 _distributor_init.py:17(__enter__)
        1    0.000    0.000    0.000    0.000 _globals.py:63(__new__)
        3    0.000    0.000    0.000    0.000 sre_compile.py:432(_generate_overlap_table)
        8    0.000    0.000    0.000    0.000 sre_parse.py:295(_class_escape)
        3    0.000    0.000    0.000    0.000 enum.py:63(__init__)
       40    0.000    0.000    0.000    0.000 enum.py:638(<lambda>)
        1    0.000    0.000    0.000    0.000 enum.py:779(_create_pseudo_member_)
        1    0.000    0.000    0.000    0.000 weakref.py:354(__init__)
        1    0.000    0.000    0.000    0.000 posixpath.py:154(dirname)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:961(set_data)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:748(exec_module)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:46(_w_long)
       10    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
        1    0.000    0.000    0.000    0.000 core.py:6045(mvoid)
        1    0.000    0.000    0.000    0.000 chebyshev.py:2109(Chebyshev)
        1    0.000    0.000    0.000    0.000 hermite.py:1814(Hermite)
        2    0.000    0.000    0.000    0.000 helper.py:245(__init__)
        1    0.000    0.000    0.001    0.001 __init__.py:27(<module>)
        1    0.000    0.000    0.000    0.000 polynomial.py:1606(Polynomial)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:7(<module>)
        3    0.000    0.000    0.000    0.000 index_tricks.py:241(__init__)
        1    0.000    0.000    0.000    0.000 bz2.py:28(BZ2File)
        1    0.000    0.000    0.000    0.000 argparse.py:152(HelpFormatter)
        1    0.000    0.000    0.000    0.000 threading.py:513(set)
        1    0.000    0.000    0.000    0.000 threading.py:894(_set_tstate_lock)
        1    0.000    0.000    0.000    0.000 difflib.py:1707(HtmlDiff)
        1    0.000    0.000    0.000    0.000 __init__.py:813(__init__)
        1    0.000    0.000    0.000    0.000 getlimits.py:62(MachArLike)
        2    0.000    0.000    0.000    0.000 arrayprint.py:450(decorating_function)
       15    0.000    0.000    0.000    0.000 arrayprint.py:868(<genexpr>)
        1    0.000    0.000    0.000    0.000 numbers.py:294(Integral)
        1    0.000    0.000    0.000    0.000 parse.py:348(_fix_result_transcoding)
        1    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 _version.py:7(<module>)
        2    0.000    0.000    0.000    0.000 datetime.py:1177(__new__)
        1    0.000    0.000    0.000    0.000 enum.py:809(__or__)
        2    0.000    0.000    0.000    0.000 functools.py:476(decorating_function)
        1    0.000    0.000    0.000    0.000 warnings.py:463(__enter__)
        7    0.000    0.000    0.000    0.000 codecs.py:331(getstate)
        6    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}
        2    0.000    0.000    0.000    0.000 {built-in method posix.unsetenv}
       72    0.000    0.000    0.000    0.000 {built-in method builtins.abs}
        2    0.000    0.000    0.000    0.000 core.py:6333(__setattr__)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:323(_get_typecodes)
        1    0.000    0.000    0.000    0.000 legendre.py:1794(Legendre)
        1    0.000    0.000    0.000    0.000 laguerre.py:1764(Laguerre)
       12    0.000    0.000    0.000    0.000 mixins.py:40(_inplace_binary_method)
        1    0.000    0.000    0.000    0.000 arraysetops.py:27(<module>)
        1    0.000    0.000    0.000    0.000 info.py:34(<module>)
        1    0.000    0.000    0.000    0.000 pytesttester.py:26(<module>)
        1    0.000    0.000    0.000    0.000 lzma.py:38(LZMAFile)
        3    0.000    0.000    0.000    0.000 utils.py:69(__init__)
        1    0.000    0.000    0.000    0.000 suite.py:16(BaseTestSuite)
        1    0.000    0.000    0.000    0.000 loader.py:66(TestLoader)
        1    0.000    0.000    0.000    0.000 argparse.py:1239(_ActionsContainer)
        1    0.000    0.000    0.000    0.000 threading.py:499(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:567(Barrier)
        1    0.000    0.000    0.000    0.000 difflib.py:43(SequenceMatcher)
        1    0.000    0.000    0.000    0.000 __init__.py:1341(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1326(Logger)
        1    0.000    0.000    0.000    0.000 records.py:304(recarray)
        1    0.000    0.000    0.000    0.000 machar.py:7(<module>)
        3    0.000    0.000    0.000    0.000 result.py:12(failfast)
        1    0.000    0.000    0.000    0.000 numeric.py:2902(_setdef)
        3    0.000    0.000    0.000    0.000 __init__.py:99(CFunctionType)
        1    0.000    0.000    0.000    0.000 _internal.py:216(_getintp_ctype)
        1    0.000    0.000    0.000    0.000 pathlib.py:125(<setcomp>)
        1    0.000    0.000    0.000    0.000 pathlib.py:126(<setcomp>)
        1    0.000    0.000    0.000    0.000 pathlib.py:273(_PosixFlavour)
      4/3    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 _datasource.py:138(_FileOpeners)
        1    0.000    0.000    0.000    0.000 _iotools.py:270(NameValidator)
        1    0.000    0.000    0.000    0.000 arrayterator.py:20(Arrayterator)
        1    0.000    0.000    0.000    0.000 info.py:156(<module>)
        2    0.000    0.000    0.000    0.000 datetime.py:804(__new__)
        1    0.000    0.000    0.000    0.000 enum.py:834(_high_bit)
        3    0.000    0.000    0.000    0.000 enum.py:334(__getattr__)
        1    0.000    0.000    0.000    0.000 posixpath.py:75(join)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:72(_check_methods)
        1    0.000    0.000    0.000    0.000 warnings.py:154(simplefilter)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:956(_cache_bytecode)
        9    0.000    0.000    0.000    0.000 {built-in method sys.intern}
        9    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'union' of 'set' objects}
       20    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 core.py:6434(__init__)
        1    0.000    0.000    0.000    0.000 extras.py:1443(MAxisConcatenator)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:177(_ndptr)
        1    0.000    0.000    0.000    0.000 core.py:836(_DomainSafeDivide)
        4    0.000    0.000    0.000    0.000 core.py:3345(dtype)
        1    0.000    0.000    0.000    0.000 helper.py:224(_FFTCache)
        1    0.000    0.000    0.000    0.000 _compression.py:9(BaseStream)
        1    0.000    0.000    0.000    0.000 _compression.py:33(DecompressReader)
        1    0.000    0.000    0.000    0.000 _compression.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tempfile.py:775(TemporaryDirectory)
        3    0.000    0.000    0.000    0.000 utils.py:52(_set_function_name)
        1    0.000    0.000    0.000    0.000 runner.py:29(TextTestResult)
        1    0.000    0.000    0.000    0.000 loader.py:77(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:204(Condition)
        1    0.000    0.000    0.000    0.000 threading.py:1183(_DummyThread)
        1    0.000    0.000    0.000    0.000 __init__.py:468(Formatter)
        1    0.000    0.000    0.000    0.000 __init__.py:794(_addHandlerRef)
        1    0.000    0.000    0.000    0.000 __init__.py:1210(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1205(Manager)
        1    0.000    0.000    0.000    0.000 string.py:175(Formatter)
        1    0.000    0.000    0.000    0.000 threading.py:243(__exit__)
        1    0.000    0.000    0.000    0.000 traceback.py:227(FrameSummary)
        1    0.000    0.000    0.000    0.000 traceback.py:437(TracebackException)
        1    0.000    0.000    0.000    0.000 case.py:1355(FunctionTestCase)
        1    0.000    0.000    0.000    0.000 getlimits.py:455(iinfo)
       15    0.000    0.000    0.000    0.000 arrayprint.py:869(<genexpr>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1249(StructuredVoidFormat)
        1    0.000    0.000    0.000    0.000 __init__.py:311(CDLL)
        1    0.000    0.000    0.000    0.000 numbers.py:267(Rational)
        1    0.000    0.000    0.000    0.000 numeric.py:156(ones)
        1    0.000    0.000    0.000    0.000 __init__.py:251(c_wchar_p)
        1    0.000    0.000    0.000    0.000 pathlib.py:454(_Selector)
        1    0.000    0.000    0.000    0.000 info.py:184(<module>)
        9    0.000    0.000    0.000    0.000 _globals.py:73(__repr__)
        1    0.000    0.000    0.000    0.000 info.py:83(<module>)
        3    0.000    0.000    0.000    0.000 datetime.py:2126(_create)
        4    0.000    0.000    0.000    0.000 re.py:185(sub)
        9    0.000    0.000    0.000    0.000 enum.py:197(<genexpr>)
        3    0.000    0.000    0.000    0.000 enum.py:359(__members__)
        1    0.000    0.000    0.000    0.000 enum.py:772(_missing_)
        2    0.000    0.000    0.000    0.000 _weakrefset.py:81(add)
        1    0.000    0.000    0.000    0.000 warnings.py:482(__exit__)
        1    0.000    0.000    0.000    0.000 posixpath.py:52(normcase)
        2    0.000    0.000    0.000    0.000 _collections_abc.py:664(__contains__)
        2    0.000    0.000    0.000    0.000 {built-in method math.log}
       15    0.000    0.000    0.000    0.000 {method 'items' of 'mappingproxy' objects}
        3    0.000    0.000    0.000    0.000 {built-in method builtins.vars}
        2    0.000    0.000    0.000    0.000 {method 'cast' of 'memoryview' objects}
        4    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        5    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        4    0.000    0.000    0.000    0.000 {method 'extend' of 'bytearray' objects}
        1    0.000    0.000    0.000    0.000 core.py:6425(_extrema_operation)
        1    0.000    0.000    0.000    0.000 core.py:6542(_frommethod)
        1    0.000    0.000    0.000    0.000 extras.py:218(_fromnxfunction)
        1    0.000    0.000    0.000    0.000 extras.py:291(_fromnxfunction_seq)
        1    0.000    0.000    0.000    0.000 extras.py:1489(__init__)
        1    0.000    0.000    0.000    0.000 core.py:206(<listcomp>)
        3    0.000    0.000    0.000    0.000 core.py:802(__init__)
        6    0.000    0.000    0.000    0.000 core.py:842(__init__)
        1    0.000    0.000    0.000    0.000 core.py:1312(_replace_dtype_fields)
        1    0.000    0.000    0.000    0.000 core.py:2593(MaskedIterator)
        2    0.000    0.000    0.000    0.000 core.py:3361(shape)
        1    0.000    0.000    0.000    0.000 core.py:6269(__array_finalize__)
        1    0.000    0.000    0.000    0.000 info.py:86(<module>)
        1    0.000    0.000    0.000    0.000 npyio.py:115(NpzFile)
        1    0.000    0.000    0.000    0.000 utils.py:997(SafeEval)
        1    0.000    0.000    0.000    0.000 nosetester.py:115(NoseTester)
        2    0.000    0.000    0.000    0.000 index_tricks.py:159(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:231(AxisConcatenator)
        1    0.000    0.000    0.000    0.000 index_tricks.py:481(ndenumerate)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_md5}
        1    0.000    0.000    0.000    0.000 tempfile.py:132(_RandomNameSequence)
        1    0.000    0.000    0.000    0.000 tempfile.py:414(_TemporaryFileCloser)
        1    0.000    0.000    0.000    0.000 random.py:669(SystemRandom)
        1    0.000    0.000    0.000    0.000 runner.py:120(TextTestRunner)
        1    0.000    0.000    0.000    0.000 utils.py:1858(clear_and_catch_warnings)
        1    0.000    0.000    0.000    0.000 argparse.py:999(_CountAction)
        1    0.000    0.000    0.000    0.000 threading.py:335(notify)
        1    0.000    0.000    0.000    0.000 threading.py:1134(Timer)
        1    0.000    0.000    0.000    0.000 __init__.py:212(_acquireLock)
        1    0.000    0.000    0.000    0.000 __init__.py:444(StringTemplateStyle)
        1    0.000    0.000    0.000    0.000 __init__.py:513(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:991(StreamHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:1139(_StderrHandler)
        1    0.000    0.000    0.000    0.000 string.py:78(Template)
        1    0.000    0.000    0.000    0.000 threading.py:88(_RLock)
        1    0.000    0.000    0.000    0.000 threading.py:240(__enter__)
        1    0.000    0.000    0.000    0.000 traceback.py:315(StackSummary)
        1    0.000    0.000    0.000    0.000 case.py:44(_Outcome)
        1    0.000    0.000    0.000    0.000 case.py:137(_AssertRaisesBaseContext)
        6    0.000    0.000    0.000    0.000 case.py:430(addTypeEqualityFunc)
        1    0.000    0.000    0.000    0.000 case.py:1413(_SubTest)
        1    0.000    0.000    0.000    0.000 records.py:217(record)
        1    0.000    0.000    0.000    0.000 memmap.py:20(memmap)
        1    0.000    0.000    0.000    0.000 machar.py:17(MachAr)
       15    0.000    0.000    0.000    0.000 arrayprint.py:872(<genexpr>)
        2    0.000    0.000    0.000    0.000 arrayprint.py:1506(set_string_function)
        1    0.000    0.000    0.000    0.000 pickle.py:184(_Framer)
        1    0.000    0.000    0.000    0.000 __init__.py:419(LibraryLoader)
        1    0.000    0.000    0.000    0.000 pathlib.py:1467(WindowsPath)
        1    0.000    0.000    0.000    0.000 parse.py:310(DefragResult)
        1    0.000    0.000    0.000    0.000 __init__.py:235(c_char_p)
        1    0.000    0.000    0.000    0.000 _internal.py:204(dummy_ctype)
        7    0.000    0.000    0.000    0.000 _inspect.py:144(<lambda>)
        1    0.000    0.000    0.000    0.000 pathlib.py:46(_Flavour)
        1    0.000    0.000    0.000    0.000 pathlib.py:567(_PathParents)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.set_string_function}
        1    0.000    0.000    0.000    0.000 _datasource.py:162(__init__)
        1    0.000    0.000    0.000    0.000 _datasource.py:265(DataSource)
        1    0.000    0.000    0.000    0.000 _datasource.py:621(Repository)
        1    0.000    0.000    0.000    0.000 _version.py:18(NumpyVersion)
        1    0.000    0.000    0.000    0.000 _distributor_init.py:28(__exit__)
        1    0.000    0.000    0.000    0.000 _import_tools.py:9(PackageLoader)
        3    0.000    0.000    0.000    0.000 datetime.py:41(_days_before_year)
        5    0.000    0.000    0.000    0.000 datetime.py:426(_check_tzinfo_arg)
        2    0.000    0.000    0.000    0.000 enum.py:886(_power_of_two)
        1    0.000    0.000    0.000    0.000 main.py:34(Cluster)
        4    0.000    0.000    0.000    0.000 re.py:205(split)
        1    0.000    0.000    0.000    0.000 copyreg.py:12(pickle)
        1    0.000    0.000    0.000    0.000 warnings.py:442(__init__)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:657(get)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:785(source_to_code)
        1    0.000    0.000    0.000    0.000 {built-in method math.exp}
        2    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 {built-in method time.time}
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_iscased}
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_tolower}
        2    0.000    0.000    0.000    0.000 {built-in method posix.getpid}
        2    0.000    0.000    0.000    0.000 {built-in method sys.setdlopenflags}
        1    0.000    0.000    0.000    0.000 {built-in method sys.setrecursionlimit}
        5    0.000    0.000    0.000    0.000 {built-in method _imp.exec_builtin}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.callable}
        7    0.000    0.000    0.000    0.000 {built-in method _warnings._filters_mutated}
        1    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}
        3    0.000    0.000    0.000    0.000 {method 'mro' of 'type' objects}
        2    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
        3    0.000    0.000    0.000    0.000 {method 'to_bytes' of 'int' objects}
        1    0.000    0.000    0.000    0.000 core.py:8033(_convert2ma)
        1    0.000    0.000    0.000    0.000 extras.py:1473(mr_class)
        1    0.000    0.000    0.000    0.000 core.py:95(MaskedArrayFutureWarning)
        1    0.000    0.000    0.000    0.000 core.py:174(MaskError)
        1    0.000    0.000    0.000    0.000 core.py:208(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:793(_DomainCheckInterval)
        1    0.000    0.000    0.000    0.000 core.py:818(_DomainTan)
        1    0.000    0.000    0.000    0.000 core.py:857(_DomainGreater)
        2    0.000    0.000    0.000    0.000 core.py:879(__init__)
        1    0.000    0.000    0.000    0.000 core.py:889(_MaskedUFunc)
        1    0.000    0.000    0.000    0.000 core.py:899(_MaskedUnaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:973(_MaskedBinaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:1121(_DomainedBinaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:1280(_replace_dtype_fields_recursive)
        1    0.000    0.000    0.000    0.000 core.py:2375(_MaskedPrintOption)
        4    0.000    0.000    0.000    0.000 core.py:6245(__has_singleton)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        4    0.000    0.000    0.000    0.000 mixins.py:55(_unary_method)
        1    0.000    0.000    0.000    0.000 npyio.py:51(BagObj)
        1    0.000    0.000    0.000    0.000 ast.py:238(NodeVisitor)
        1    0.000    0.000    0.000    0.000 ast.py:275(NodeTransformer)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:15(DummyArray)
        1    0.000    0.000    0.000    0.000 pytesttester.py:44(PytestTester)
        1    0.000    0.000    0.000    0.000 index_tricks.py:98(nd_grid)
        1    0.000    0.000    0.000    0.000 index_tricks.py:446(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:476(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:531(ndindex)
        1    0.000    0.000    0.000    0.000 index_tricks.py:609(IndexExpression)
        1    0.000    0.000    0.000    0.000 function_base.py:1760(vectorize)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha1}
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha224}
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha256}
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha384}
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha512}
        1    0.000    0.000    0.000    0.000 tempfile.py:457(_TemporaryFileWrapper)
        1    0.000    0.000    0.000    0.000 random.py:88(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:57(_Deprecate)
        1    0.000    0.000    0.000    0.000 runner.py:13(_WritelnDecorator)
        1    0.000    0.000    0.000    0.000 signals.py:9(_InterruptHandler)
        1    0.000    0.000    0.000    0.000 utils.py:1212(_Dummy)
        1    0.000    0.000    0.000    0.000 shutil.py:58(SameFileError)
        1    0.000    0.000    0.000    0.000 shutil.py:65(ExecError)
        1    0.000    0.000    0.000    0.000 shutil.py:71(RegistryError)
        1    0.000    0.000    0.000    0.000 suite.py:92(TestSuite)
        1    0.000    0.000    0.000    0.000 suite.py:270(_ErrorHolder)
        1    0.000    0.000    0.000    0.000 suite.py:317(_DebugResult)
        1    0.000    0.000    0.000    0.000 loader.py:23(_FailedTest)
        1    0.000    0.000    0.000    0.000 argparse.py:105(_AttributeHolder)
        1    0.000    0.000    0.000    0.000 argparse.py:650(RawDescriptionHelpFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:672(ArgumentDefaultsHelpFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:689(MetavarTypeHelpFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:751(Action)
        1    0.000    0.000    0.000    0.000 argparse.py:934(_AppendAction)
        1    0.000    0.000    0.000    0.000 argparse.py:972(_AppendConstAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1041(_VersionAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1067(_SubParsersAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1219(Namespace)
        1    0.000    0.000    0.000    0.000 argparse.py:1546(_ArgumentGroup)
        1    0.000    0.000    0.000    0.000 argparse.py:1580(_MutuallyExclusiveGroup)
        1    0.000    0.000    0.000    0.000 threading.py:255(_is_owned)
        1    0.000    0.000    0.000    0.000 threading.py:358(notify_all)
        1    0.000    0.000    0.000    0.000 threading.py:370(Semaphore)
        1    0.000    0.000    0.000    0.000 threading.py:488(Event)
        1    0.000    0.000    0.000    0.000 threading.py:721(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 threading.py:891(_set_ident)
        1    0.000    0.000    0.000    0.000 threading.py:1164(_MainThread)
        1    0.000    0.000    0.000    0.000 difflib.py:751(Differ)
        2    0.000    0.000    0.000    0.000 __init__.py:187(_checkLevel)
        1    0.000    0.000    0.000    0.000 __init__.py:221(_releaseLock)
        1    0.000    0.000    0.000    0.000 __init__.py:246(_register_at_fork_acquire_release)
        1    0.000    0.000    0.000    0.000 __init__.py:281(LogRecord)
        1    0.000    0.000    0.000    0.000 __init__.py:426(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:420(PercentStyle)
        1    0.000    0.000    0.000    0.000 __init__.py:643(BufferingFormatter)
        1    0.000    0.000    0.000    0.000 __init__.py:685(Filter)
        1    0.000    0.000    0.000    0.000 __init__.py:722(Filterer)
        1    0.000    0.000    0.000    0.000 __init__.py:842(createLock)
        1    0.000    0.000    0.000    0.000 __init__.py:1070(FileHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:1145(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1673(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:2059(NullHandler)
        1    0.000    0.000    0.000    0.000 string.py:55(_TemplateMetaclass)
        2    0.000    0.000    0.000    0.000 threading.py:75(RLock)
        1    0.000    0.000    0.000    0.000 tokenize.py:94(TokenInfo)
        1    0.000    0.000    0.000    0.000 tokenize.py:108(any)
        2    0.000    0.000    0.000    0.000 tokenize.py:109(maybe)
        1    0.000    0.000    0.000    0.000 tokenize.py:212(TokenError)
        1    0.000    0.000    0.000    0.000 tokenize.py:217(Untokenizer)
        1    0.000    0.000    0.000    0.000 case.py:25(SkipTest)
        1    0.000    0.000    0.000    0.000 case.py:33(_ShouldStop)
        1    0.000    0.000    0.000    0.000 case.py:128(_BaseTestCaseContext)
        1    0.000    0.000    0.000    0.000 case.py:184(_AssertRaisesContext)
        1    0.000    0.000    0.000    0.000 case.py:221(_AssertWarnsContext)
        1    0.000    0.000    0.000    0.000 case.py:278(_CapturingHandler)
        1    0.000    0.000    0.000    0.000 case.py:297(_AssertLogsContext)
        1    0.000    0.000    0.000    0.000 case.py:341(_OrderedChainMap)
        1    0.000    0.000    0.000    0.000 records.py:85(format_parser)
        1    0.000    0.000    0.000    0.000 getlimits.py:305(finfo)
       15    0.000    0.000    0.000    0.000 arrayprint.py:879(<genexpr>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:810(FloatingFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:953(FloatFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:960(LongFloatFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1109(IntegerFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1122(BoolFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1161(ComplexFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1176(_TimelikeFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1202(DatetimeFormat)
        1    0.000    0.000    0.000    0.000 numeric.py:2824(errstate)
        1    0.000    0.000    0.000    0.000 pickle.py:75(UnpicklingError)
        1    0.000    0.000    0.000    0.000 pickle.py:88(_Stop)
        1    0.000    0.000    0.000    0.000 pickle.py:247(_Unframer)
        1    0.000    0.000    0.000    0.000 __init__.py:379(PyDLL)
        2    0.000    0.000    0.000    0.000 __init__.py:420(__init__)
        1    0.000    0.000    0.000    0.000 _endian.py:23(_swapped_meta)
        1    0.000    0.000    0.000    0.000 numerictypes.py:750(_typedict)
        1    0.000    0.000    0.000    0.000 numbers.py:12(Number)
        1    0.000    0.000    0.000    0.000 numeric.py:83(ComplexWarning)
        1    0.000    0.000    0.000    0.000 parse.py:126(_ResultMixinStr)
        1    0.000    0.000    0.000    0.000 parse.py:175(_NetlocResultMixinStr)
        1    0.000    0.000    0.000    0.000 parse.py:205(_NetlocResultMixinBytes)
        1    0.000    0.000    0.000    0.000 parse.py:318(SplitResult)
        1    0.000    0.000    0.000    0.000 parse.py:323(ParseResult)
        1    0.000    0.000    0.000    0.000 parse.py:329(DefragResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:337(SplitResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:342(ParseResultBytes)
        1    0.000    0.000    0.000    0.000 parse.py:724(Quoter)
        1    0.000    0.000    0.000    0.000 __init__.py:151(py_object)
        1    0.000    0.000    0.000    0.000 __init__.py:160(c_short)
        1    0.000    0.000    0.000    0.000 __init__.py:164(c_ushort)
        1    0.000    0.000    0.000    0.000 __init__.py:172(c_ulong)
        1    0.000    0.000    0.000    0.000 __init__.py:185(c_uint)
        1    0.000    0.000    0.000    0.000 __init__.py:189(c_float)
        1    0.000    0.000    0.000    0.000 __init__.py:218(c_ubyte)
        1    0.000    0.000    0.000    0.000 __init__.py:230(c_char)
        1    0.000    0.000    0.000    0.000 __init__.py:256(c_wchar)
        1    0.000    0.000    0.000    0.000 __init__.py:350(_FuncPtr)
        1    0.000    0.000    0.000    0.000 _internal.py:239(_missing_ctypes)
        1    0.000    0.000    0.000    0.000 _internal.py:686(AxisError)
        5    0.000    0.000    0.000    0.000 _inspect.py:145(<lambda>)
        2    0.000    0.000    0.000    0.000 pathlib.py:50(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:485(_PreciseSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:501(_WildcardSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:524(_RecursiveWildcardSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:954(PurePosixPath)
        1    0.000    0.000    0.000    0.000 pathlib.py:964(PureWindowsPath)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.set_typeDict}
        1    0.000    0.000    0.000    0.000 _iotools.py:170(LineSplitter)
        1    0.000    0.000    0.000    0.000 _iotools.py:464(ConverterError)
        1    0.000    0.000    0.000    0.000 _distributor_init.py:13(RTLD_for_MKL)
        1    0.000    0.000    0.000    0.000 _globals.py:33(ModuleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _globals.py:55(_NoValueType)
        5    0.000    0.000    0.000    0.000 datetime.py:46(_days_in_month)
        1    0.000    0.000    0.000    0.000 datetime.py:646(__neg__)
        1    0.000    0.000    0.000    0.000 datetime.py:1082(tzinfo)
        2    0.000    0.000    0.000    0.000 enum.py:880(<lambda>)
        1    0.000    0.000    0.000    0.000 sre_parse.py:288(seek)
        1    0.000    0.000    0.000    0.000 __future__.py:80(_Feature)
        1    0.000    0.000    0.000    0.000 copyreg.py:22(constructor)
       11    0.000    0.000    0.000    0.000 enum.py:602(name)
        2    0.000    0.000    0.000    0.000 functools.py:445(lru_cache)
        1    0.000    0.000    0.000    0.000 weakref.py:288(update)
        1    0.000    0.000    0.000    0.000 os.py:1076(__subclasshook__)
        2    0.000    0.000    0.000    0.000 posixpath.py:41(_get_sep)
        1    0.000    0.000    0.000    0.000 _collections_abc.py:349(__subclasshook__)
        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:765(is_package)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:381(_calc_mode)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 {built-in method _thread._set_sentinel}
        1    0.000    0.000    0.000    0.000 {built-in method atexit.register}
        1    0.000    0.000    0.000    0.000 {built-in method sys.getdlopenflags}
        1    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        1    0.000    0.000    0.000    0.000 extras.py:273(_fromnxfunction_single)
        1    0.000    0.000    0.000    0.000 extras.py:304(_fromnxfunction_args)
        1    0.000    0.000    0.000    0.000 extras.py:329(_fromnxfunction_allargs)
        1    0.000    0.000    0.000    0.000 core.py:166(MAError)
        1    0.000    0.000    0.000    0.000 core.py:826(__init__)
        3    0.000    0.000    0.000    0.000 core.py:863(__init__)
        1    0.000    0.000    0.000    0.000 core.py:873(_DomainGreaterEqual)
        1    0.000    0.000    0.000    0.000 core.py:1326(make_mask_descr)
        3    0.000    0.000    0.000    0.000 core.py:1359(getmask)
        1    0.000    0.000    0.000    0.000 core.py:2381(__init__)
        1    0.000    0.000    0.000    0.000 polyutils.py:58(RankWarning)
        1    0.000    0.000    0.000    0.000 polyutils.py:62(PolyError)
        1    0.000    0.000    0.000    0.000 polyutils.py:66(PolyDomainError)
        1    0.000    0.000    0.000    0.000 polyutils.py:79(PolyBase)
        1    0.000    0.000    0.000    0.000 polynomial.py:22(RankWarning)
        1    0.000    0.000    0.000    0.000 linalg.py:44(LinAlgError)
        1    0.000    0.000    0.000    0.000 decorators.py:99(skipif)
        1    0.000    0.000    0.000    0.000 index_tricks.py:351(RClass)
        1    0.000    0.000    0.000    0.000 index_tricks.py:451(CClass)
        2    0.000    0.000    0.000    0.000 index_tricks.py:653(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:45(KnownFailureException)
        1    0.000    0.000    0.000    0.000 utils.py:1816(IgnoreException)
        1    0.000    0.000    0.000    0.000 shutil.py:55(Error)
        1    0.000    0.000    0.000    0.000 shutil.py:61(SpecialFileError)
        1    0.000    0.000    0.000    0.000 shutil.py:68(ReadError)
        1    0.000    0.000    0.000    0.000 argparse.py:202(_Section)
        1    0.000    0.000    0.000    0.000 argparse.py:661(RawTextHelpFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:722(ArgumentError)
        1    0.000    0.000    0.000    0.000 argparse.py:742(ArgumentTypeError)
        1    0.000    0.000    0.000    0.000 argparse.py:842(_StoreAction)
        1    0.000    0.000    0.000    0.000 argparse.py:877(_StoreConstAction)
        1    0.000    0.000    0.000    0.000 argparse.py:900(_StoreTrueAction)
        1    0.000    0.000    0.000    0.000 argparse.py:917(_StoreFalseAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1022(_HelpAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1069(_ChoicesPseudoAction)
        1    0.000    0.000    0.000    0.000 threading.py:450(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 pprint.py:72(_safe_key)
        1    0.000    0.000    0.000    0.000 __init__.py:435(StrFormatStyle)
        2    0.000    0.000    0.000    0.000 __init__.py:727(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1163(PlaceHolder)
        1    0.000    0.000    0.000    0.000 __init__.py:1667(RootLogger)
        1    0.000    0.000    0.000    0.000 tokenize.py:214(StopTokenizing)
        1    0.000    0.000    0.000    0.000 case.py:38(_UnexpectedSuccess)
        2    0.000    0.000    0.000    0.000 arrayprint.py:440(_recursive_guard)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1132(ComplexFloatingFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1168(LongComplexFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1234(TimedeltaFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1239(SubArrayFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1286(StructureFormat)
        1    0.000    0.000    0.000    0.000 numeric.py:2817(_unspecified)
        1    0.000    0.000    0.000    0.000 pickle.py:64(PickleError)
        1    0.000    0.000    0.000    0.000 pickle.py:68(PicklingError)
        1    0.000    0.000    0.000    0.000 _endian.py:46(BigEndianStructure)
        1    0.000    0.000    0.000    0.000 parse.py:134(_ResultMixinBytes)
        1    0.000    0.000    0.000    0.000 __init__.py:168(c_long)
        1    0.000    0.000    0.000    0.000 __init__.py:181(c_int)
        1    0.000    0.000    0.000    0.000 __init__.py:193(c_double)
        1    0.000    0.000    0.000    0.000 __init__.py:197(c_longdouble)
        1    0.000    0.000    0.000    0.000 __init__.py:225(c_byte)
        1    0.000    0.000    0.000    0.000 __init__.py:241(c_void_p)
        1    0.000    0.000    0.000    0.000 __init__.py:246(c_bool)
        1    0.000    0.000    0.000    0.000 _internal.py:683(TooHardError)
        1    0.000    0.000    0.000    0.000 pathlib.py:376(_Accessor)
        1    0.000    0.000    0.000    0.000 pathlib.py:479(_TerminatingSelector)
        1    0.000    0.000    0.000    0.000 pathlib.py:1460(PosixPath)
        1    0.000    0.000    0.000    0.000 _iotools.py:472(ConverterLockError)
        1    0.000    0.000    0.000    0.000 _iotools.py:480(ConversionWarning)
        1    0.000    0.000    0.000    0.000 _distributor_init.py:14(__init__)
        1    0.000    0.000    0.000    0.000 _globals.py:45(VisibleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 version.py:5(<module>)
        1    0.000    0.000    0.000    0.000 _import_tools.py:339(PackageLoaderDebug)
        1    0.000    0.000    0.000    0.000 re.py:252(escape)
        1    0.000    0.000    0.000    0.000 {built-in method math.sqrt}


